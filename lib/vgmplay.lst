0000                1 ;;;;;;;;;;;;;;;;;
0000                2 ;;
0000                3 ;; Z80 VGM Player
0000                4 ;; 
0000                5 ;; v 0.25
0000                6 ; WARNING: 68k side addresses changed from a00080+ to a00100+
0000                7 ; Set to NTSC 
0000                8 ; Samples currently OFF while debugging
0000                9 ; Watch for macros
0000               10 
0000               11 ; by RetroDevDiscord
0000               12 
0000               13 ; Special thanks to: 
0000               14 ;  Stef 
0000               15 ;  vytah
0000               16 
0000               17 ;;; TO USE: 
0000               18 ; Set byte a00100 to 1 every vblank to play!
0000               19 ; read byte a00101 to see if song is playing or not.
0000               20 ; Set SongBaseAddress (102h-105h) to full 32bit address 
0000               21 ; and RomBank (106h) to bit 15+ of the 68000 memory bank
0000               22 ; If PAL, set the PAL flag to 1 (108h), otherwise, 0=NTSC
0000               23 
0000               24 ; TODOS:
0000               25 ; - Tie z80 to vblank interrupt so it isn't driven by 68000
0000               26 ; - Add error checking for vgm 1.60
0000               27 ; - weirder bytecodes 
0000               28 ; - multiple sample streams 
0000               29 ; - WIP: multiple data blocks
0000               30 
0000               31 ;;;;;
0000               32 ; FIXMEs
0000               33 ; - copy and paste CurDac stuff within dac loop 
0000               34 ; - dac block transfer size needs adjusting / delay based on sample width!
0000               35 
0000               36 
0000               37 FMREG0 EQU $4000
0000               38 FMDAT0 EQU $4001
0000               39 FMREG1 EQU $4002
0000               40 FMDAT1 EQU $4003
0000               41 BANKREG EQU $6000
0000               42 PSGREG EQU $7F11
0000               43 
0000               44 
0000               45 VGM_START EQU $00 
0000               46 VGM_END EQU $04       ;*: ; 2004-2005
0000               47 SSGCLOCK EQU $0C      ; : ; 200c-200f
0000               48 SAMPLECOUNT EQU $18   ;*:  ; 2018-201b 0X22740
0000               49 LOOPOFFSET EQU $1c    ;*: 201c-201f
0000               50 LOOPNUMS EQU $20      ;*:   ; 2020-2023
0000               51 RATE EQU $24          ;:   ; 2024-2027 = 60
0000               52 SNFB EQU $28          ;*?:  ; 2028-9 = 0009
0000               53 SNW EQU $2a           ;*?; 202a = 16
0000               54 SF EQU $2b            ;*:    ; 202b ; ssg flags all 0
0000               55 YM2612CLK EQU $2C     ;: ; 202c-202f = 0x750ab6 
0000               56 VGMDATOFS EQU $34     ;*:  ; 2034-2037
0000               57 ;SPCMCLK EQU $2038       ;:    ; 2038-203b
0000               58 ;SPCMI EQU $203C         ;:   ; 203c-203f
0000               59 VM EQU $7C            ;: volume modifier (default 0) ; 207c
0000               60 LB EQU $7E            ;: loop base; 207e
0000               61 LM EQU $7F            ;: loop modifier; 207f
0000               62         
0000               63         org $0
0000               64 
0000               65 ; disable interrupts
0000 f3            66         di 
0001               67 
0001               68 ; clear the stack
0001 3e 00         69         ld a, 0
0003 11 00 1c      70         ld de, $1c00 
0006 06 00         71         ld b, 0 
0008               72 _clrstack:
0008 12            73         LD (DE),A
0009 13            74         inc de 
000a 10 fc         75         djnz _clrstack
000c               76 _clr2
000c 12            77         ld (de),a 
000d 13            78         inc de 
000e 10 fc         79         djnz _clr2
0010               80 _clr3 
0010 12            81         ld (de),a 
0011 13            82         inc de 
0012 10 fc         83         djnz _clr3
0014               84 
0014               85 ; set the stack pointer 
0014 31 80 1d      86         ld sp,$1d80 
0017               87 
0017               88 ; clear and go!
0017 cd e1 02      89         call CLEARPSG 
001a cd 06 02      90         call BANKSWAP
001d               91 
001d c3 1c 01      92         jp LOADVGM 
0020               93         
0020               94 ; +8 and +9 should contain VGM version number.
0020               95 ;VERSIONCHECK:
0020               96 ;        ld hl, ($2008) 
0020               97 ;        cp h, $60
0020               98 ;        jr nz,WRONGVER
0020               99 ;        cp l, $01
0020              100 ;        jr nz,WRONGVER 
0020              101 ;        jp LOADVGM
0020              102 ;WRONGVER:
0020              103 ;        jp WRONGVER
0020              104 
0020              105 CLRTB:
0020 9f bf df ff  106         defb $9f,$bf,$df,$ff
0024              107 LoopPlay: 
0024 00           108         defb 0
0025              109 LoopLoc:        
0025 00 00 00 00  110         defb 0,0,0,0
0029              111 
0029 00 00 00 00  112 WORKRAM: defb 0,0,0,0
002d              113 
002d 00 00 00 00  114 SongDataStart: defb 0,0,0,0
0031              115 
0031              116 
0031              117 ; sub 50h then times 2
0031              118 CMDJUMPTABLE: ; starts at 50h
0031 b9 02 00 00 68 02 94 02 00 00 00 00 00 00 00 00  119         defw WRITEPSG, 0, WRITEFM1, WRITEFM2, 0, 0, 0, 0 ; 50-57
0041 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  120         DEFW 0, 0, 0, 0, 0, 0, 0, 0 ;   58-5F
0051 00 00 c7 02 84 01 84 01 00 00 00 00 a5 01 a2 05  121         defw 0, SAMPLEWAIT, FRAMEOVER, FRAMEOVER, 0, 0, SONGOVER, DATABLOCK ; 60-67
0061 ac 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  122         DEFW WRITEPCM, 0, 0, 0, 0, 0, 0, 0
0071 b0 01 b0 01 b0 01 b0 01 b0 01 b0 01 b0 01 b0 01  123         DEFW QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT ;70
0081 b0 01 b0 01 b0 01 b0 01 b0 01 b0 01 b0 01 b0 01  124         DEFW QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT ;7F   
0091 b4 01 b4 01 b4 01 b4 01 b4 01 b4 01 b4 01 b4 01  125         DEFW QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT
00a1 b4 01 b4 01 b4 01 b4 01 b4 01 b4 01 b4 01 b4 01  126         DEFW QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT ;..8f
00b1 a6 03 c5 03 03 04 74 04 9b 03 80 04  127         DEFW DACSETUP, SETDACSTREAM, SETDACFREQ, STARTDACSTREAM, STOPDAC, DACFASTCALL ; 90-95
00bd a1 01 18 01  128         DEFW ERROR, FOREVERLOOP  ; 96, 97
00c1              129 
00c1              130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00c1              131 
00c1              132         org $100
0100              133 
0100              134 ; Vars
0100              135 PlayNext:
0100 00           136         defb 0          ; 100h
0101              137 SongPlaying: 
0101 00           138         defb 0          ; 101h
0102              139 SongBaseAddress:        ; Set me when loading the song from the 68000!
0102 00 00 00 00  140         defb $0, $0, 0, 0 ; 102-105h
0106              141 RomBank:
0106 00           142         defb 0          ; 106h
0107              143 StartBank:
0107 00           144         defb 0          ; --
0108              145 ; This is 0 if NTSC, and 1 if PAL.
0108 00           146 PALFlag: defb 0         ; 108h
0109              147 ; Set this to 1 and the next frame the Z80 will reset (jp 0). 
0109              148 ; Do this after changing SongBaseAddress to change songs. 
0109 00           149 ResetFlag: defb 0       ; 109h
010a              150 
010a              151 FREECYCLES: ; 10Ah
010a 00 00        152         defw 0 
010c              153 SAMPTOWAIT:
010c 00 00        154         defw 0
010e              155 LOCALEWAIT: 
010e 00 00        156         defw 0
0110              157 PALWAIT equ 882 
0110              158 NTSCWAIT equ 735
0110              159 
0110 00 00 00 00  160 Sample1Address: defw 0,0        
0114 00 00 00 00  161 Sample1Length:  defw 0,0         ; this is also the address of the next sample in block.
0118              162 
0118              163 FOREVERLOOP:
0118 2b           164         dec hl 
0119 c3 84 01     165         jp FRAMEOVER
011c              166 
011c              167 LOADVGM:
011c              168 ;;;;;;;;;;;;;;;;
011c 3a 08 01     169         ld a,(PALFlag)
011f fe 00        170         cp 0
0121 28 08        171         jr z,_ntw
0123 21 72 03     172         ld hl,PALWAIT
0126 22 0e 01     173         ld (LOCALEWAIT),hl 
0129 18 06        174         jr _ld 
012b              175 _ntw:
012b 21 df 02     176         ld hl,NTSCWAIT
012e 22 0e 01     177         ld (LOCALEWAIT),hl 
0131              178 _ld:
0131              179         ;LD A,1 
0131              180         ;LD (SongPlaying),A      ; set playing var to ON
0131 3a 06 01     181         LD A,(RomBank) 
0134 32 07 01     182         LD (StartBank),A        ; Store the initial ROM bank for looping.
0137              183         
0137              184 ; Set the memory window to the song header (+1c)      
0137              185         ;ld hl,(SongBaseAddress)
0137              186         ;ld bc,$001c 
0137              187         ;xor a 
0137              188         ;adc hl,bc 
0137              189         ;ld (ZadrWork),hl 
0137              190         ;ld hl,(SongBaseAddress+2)
0137              191         ;ld bc,$0000
0137              192         ;adc hl,bc               ; catch the carry
0137              193         ;ld (ZadrWork+2),hl
0137              194         ;call SETZADDRESS        ; set bank to song base address + 1c!
0137              195 
0137              196 noloop:
0137              197 ; Now set HL to song data pointer - longword at 0x0034 into the VGM header 
0137 2a 02 01     198         ld hl,(SongBaseAddress)    ; 00001ef7, need to add 83 to skip header and
013a              199                                    ; byte size
013a              200         ;ld bc, $0080            ; skip the header
013a              201         ;xor a 
013a              202         ;adc hl,bc  ; 0x100              ; 1f2b 1f2e is wrong! should be 1f7a
013a 22 b7 01     203         ld (ZadrWork),hl           ; 16bit addition ; START BAD CODE
013d              204         ;ld bc,$0000
013d 2a 04 01     205         ld hl,(SongBaseAddress+2)
0140              206         ;adc hl,bc ; catch the carry 
0140 22 b9 01     207         ld (ZadrWork+2),hl              ; < ok
0143 cd bb 01     208         call SETZADDRESS   
0146              209 
0146              210 
0146 2b           211         dec hl  ;) < go down one because we call GetNextSongByte below
0147              212 PLAYLOOP:
0147              213 ;;;;;;;;;;;;;;;;               ; +27..400
0147 3a 0c 01     214         ld a,(SAMPTOWAIT)
014a b7           215         or a 
014b 28 1e        216         jr z, _nosampwt
014d e5           217         push hl 
014e 2a 0c 01     218          ld hl,(SAMPTOWAIT)
0151 ed 4b 0e 01  219          ld bc,(LOCALEWAIT) 
0155 ed 42        220          sbc hl,bc
0157 fa 61 01     221          jp m,_zero 
015a 22 0c 01     222          ld (SAMPTOWAIT),hl 
015d e1           223         pop hl 
015e c3 84 01     224         jp FRAMEOVER ; SKIP THIS FRAME IF TIME REMAINS.
0161              225 _zero:
0161 21 00 00     226          ld hl, 0
0164 22 0c 01     227          ld (SAMPTOWAIT), hl 
0167 e1           228         pop hl 
0168 c3 84 01     229         jp FRAMEOVER 
016b              230 _nosampwt:
016b 23           231         inc hl                  ; +6
016c 7c           232         ld a,h                  ; +4
016d e6 80        233         and $80                 ; +7
016f cc 2a 02     234         call z,BANKUP ; this also sets HL to 8000 +17/10
0172 7e           235         LD A,(HL)
0173              236         ; sub 50h, times 2 + &CMDJUMPTABLE
0173 16 50        237         ld d,$50
0175 92           238         sub d 
0176 cb 27        239         sla a ; a = (a-50)*2 + jumptab
0178 01 31 00     240         ld bc,CMDJUMPTABLE 
017b 81           241         add a,c   ; bc+a =>
017c 4f           242         ld c,a    ;  de
017d 0a           243         ld a,(bc) 
017e 5f           244         ld e,a 
017f 03           245         inc bc 
0180 0a           246         ld a,(bc) 
0181 57           247         ld d,a
0182 d5           248         push de 
0183 c9           249         ret 
0184              250 
0184              251 
0184              252 FRAMEOVER:
0184              253 ;;;;;;;;;;;
0184              254 ; * A
0184              255         
0184 cd a1 05     256         call ProcessSampleQueue   ; rearrange queued samples
0187              257 ; Waits until next vblank signal (done via 68k)
0187 01 00 00     258         ld bc,0
018a              259 _framewait:
018a 03           260         inc bc 
018b 3a 00 01     261         LD A,(PlayNext)  ; check the 'play next frame' var
018e fe 01        262         CP 1             ; is it = 1?
0190 20 f8        263         JR NZ,_framewait  ; if not, loop.
0192 af           264         xor a            ; if it is, clear it.
0193 32 00 01     265         ld (PlayNext),a 
0196 ed 43 0a 01  266         ld (FREECYCLES),bc
019a cd fd 02     267         call DACBLOCKTRANSFER  
019d c3 47 01     268         JP PLAYLOOP 
01a0              269 ;;;; 
01a0              270 
01a0              271 
01a0              272 ;;;;;;;;;;;;;;;;;;;
01a0 99           273 ERRDEFB: DEFB $99
01a1              274 ; This error handling is super rudimentary and only intended to get songs to
01a1              275 ;  play without crashing!
01a1              276 ERROR:  
01a1              277         ;jp ERROR 
01a1 c3 1c 01     278         jp LOADVGM
01a4              279 
01a4 55           280 _songoverb: defb $55
01a5              281 SONGOVER:
01a5              282 ;;;;;;;;;;;
01a5              283 ; * A
01a5              284 ; Stops the song when hits command byte 0x66
01a5              285 ;  Or, if looping, jumps to loop
01a5 c3 1c 01     286         jp LOADVGM
01a8              287 
01a8              288 
01a8              289 VOLUMESET:
01a8              290         ;JP PLAYLOOP  
01a8 c3 a8 01     291         JP VOLUMESET 
01ab              292         
01ab              293 
01ab 11           294 aaa: defb $11
01ac              295 WRITEPCM:
01ac              296         ;jp PLAYLOOP  
01ac c3 ac 01     297         JP WRITEPCM 
01af 22           298 bbb: defb $22
01b0              299 ; Waits 1-16 samples
01b0              300 QWAIT:
01b0              301 
01b0 c3 47 01     302         JP PLAYLOOP 
01b3 33           303 ccc: defb $33
01b4              304 QFMWAIT:
01b4 c3 84 01     305         jp FRAMEOVER
01b7              306         ;JP QFMWAIT 
01b7              307 
01b7 00 00 00 00  308 ZadrWork: defb 0,0,0,0
01bb              309 
01bb              310 SETZADDRESS:
01bb              311 ;;;;;;;;;;;;;;;;;;
01bb              312 ; * A H L, RomBank, ZadrWork, 
01bb              313 ; Input: ZadrWork 32-bit address (68000 memory)
01bb              314 ; Output: changes active rom bank, and sets HL to mem addr
01bb 2a b8 01     315         ld hl,(ZadrWork+1) ; ignore bits 0-7, so we have 8-23
01be af           316         xor a ; clc 
01bf cb 3c        317         srl h
01c1 cb 1d        318         rr l   ; hl >> 1
01c3 cb 3c        319         srl h
01c5 cb 1d        320         rr l   ; hl >> 2
01c7 cb 3c        321         srl h
01c9 cb 1d        322         rr l   ; hl >> 3
01cb cb 3c        323         srl h
01cd cb 1d        324         rr l   ; hl >> 4
01cf cb 3c        325         srl h
01d1 cb 1d        326         rr l   ; hl >> 5
01d3 cb 3c        327         srl h
01d5 cb 1d        328         rr l   ; hl >> 6
01d7 cb 3c        329         srl h
01d9 cb 1d        330         rr l   ; hl >> 7 
01db 7d           331         ld a,l 
01dc 32 06 01     332         ld (RomBank),a ; BITS 15-22
01df 3a 00 40     333         LD A,($4000) 
01e2 87           334         ADD A, A 
01e3 38 fc        335         JR C,-4
01e5 cd 06 02     336         call BANKSWAP
01e8 2a b7 01     337         LD HL,(ZadrWork)  ; 0-15 
01eb 3e 7f        338         ld a,$7f 
01ed a4           339         and h 
01ee f6 80        340         or $80 ; always set top bit so we look at $8000 + 
01f0 67           341         ld h,a
01f1 e5           342         push hl 
01f2 21 00 00     343         ld hl,$0000 
01f5 22 b7 01     344         ld (ZadrWork),hl 
01f8 22 b9 01     345         ld (ZadrWork+2),hl 
01fb e1           346         pop hl 
01fc              347         ; [HL] now contains memory pointer!
01fc c9           348         ret
01fd              349 ;;;;
01fd              350 
01fd 00 00 00 00 00 00 00 00 00  351 bankwork: defb 0,0,0,0,0,0,0,0,0
0206              352 
0206              353 BANKSWAP:
0206              354 ;;;;;;;;;;;;;
0206              355 ; * A (preserve bc/hl)
0206              356 ; RomBank has the # of the 32kb block to write to 6000.
0206              357 ; (Currently does not support > 8mb)
0206              358 ; Must write bank bits from 0-8 in ascending order in BYTE size
0206              359 ;  e.g. 00000000 or 00000001 x 9
0206 c5           360         push bc                         
0207 e5           361         push hl 
0208              362 ;; - convert RomBank to binary 
0208 21 fd 01     363         ld hl,bankwork    ; &bankwork
020b 0e 01        364         ld c,1
020d              365 _bankworkloop
020d 3a 06 01     366         ld a,(RomBank)  
0210 a1           367         and c           ; bank & 001 ... bank & 010 ... 
0211 77           368         ld (hl),a 
0212 23           369         inc hl          ; bankwork++
0213 cb 21        370         sla c           ; c << 1
0215 30 f6        371         jr nc,_bankworkloop
0217              372 ;; - write one byte at a time to bank register
0217 21 fd 01     373         ld hl,bankwork  ; &bankwork
021a 01 09 00     374         ld bc,9         ; for i < 9...
021d              375 _b0r
021d 7e           376         ld a,(hl)
021e 32 00 60     377         ld ($6000),a    ; bank register
0221 23           378         inc hl 
0222 0b           379         dec bc 
0223 79           380         ld a,c 
0224 b0           381         or b 
0225 20 f6        382         jr nz,_b0r
0227              383         ; reset/return
0227 e1           384         pop hl 
0228 c1           385         pop bc 
0229 c9           386         ret
022a              387 
022a              388 
022a              389 ;;;;                                    ; ~300?
022a              390 
022a              391 BANKUP:
022a              392 ;;;;;;;;;;;;;;
022a              393 ; * A H L
022a              394 ; Pops up the rom bank by 1 and 
022a              395 ; sets HL back to $8000
022a 3a 06 01     396         ld a,(RomBank)          ; +13
022d 3c           397         inc a                   ; +4   
022e 32 06 01     398         ld (RomBank),a          ; +13
0231 cd 06 02     399         call BANKSWAP           ; +17 +(BANKSWAP)
0234 21 00 80     400         ld hl,$8000             ; +10
0237 c9           401         ret                     ; +10
0238              402 ;;;;                            ; Total : 67+~300
0238              403 
0238              404 GETROMADDRESS: 
0238              405 ;;;;;;;;;;;;;;
0238              406 ; INPUT: ZadrWork+0 BANK
0238              407 ;        ZadrWork+2~ZadrWork+3 HL
0238              408 ; (bank * 8000) + HL & 7fff
0238              409 ; OUTPUT: ZadrWork ~ ZadrWork+3 CONTAINS LONGWORD ADDRESS
0238              410 ; * A
0238              411 ; Preserves HL
0238 e5           412         push hl
0239 c5           413         push bc  
023a af           414          xor a ; clc 
023b 3a b7 01     415          ld a,(ZadrWork) ; contains RomBank, A15-A22
023e              416          ; 15:
023e e6 01        417          and $1 
0240 cb 1f        418          rr a   ; 15 > carry 
0242 cb 1f        419          rr a   ; carry > 7, carry = 0
0244 47           420          ld b,a ; contains bit 15 ; SAVE
0245 3a b7 01     421          ld a,(ZadrWork) ; 15-22...
0248 e6 fe        422          and $fe
024a cb 3f        423          srl a    ; and the last bit and shift RIGHT, so we have 16-23 (minus23)
024c 2a b9 01     424          ld hl,(ZadrWork+2) 
024f 32 b9 01     425          ld (ZadrWork+2),a ; put it in the 3rd byte 
0252 af           426          xor a 
0253 32 b7 01     427          ld (ZadrWork),a 
0256 32 b8 01     428          ld (ZadrWork+1),a ; zero the first two
0259              429          
0259 3e 7f        430          ld a,$7f 
025b a4           431          and h ; hl = bits 0-14, dont forget 15 in b!
025c b0           432          or b           ; d(>.< )
025d 67           433          ld h,a
025e 22 b7 01     434          ld (ZadrWork),hl 
0261 af           435          xor a 
0262 32 ba 01     436          ld (ZadrWork+3),a ; 24-31 are always 0
0265 c1           437         pop bc 
0266 e1           438         pop hl 
0267 c9           439         RET 
0268              440 
0268              441 
0268              442 
0268              443 WRITEFM1:
0268              444 ;;;;;;;;;;;;;;;;;;;
0268              445 ; HL - location of song byte
0268              446 ; * A  
0268 23           447         inc hl                  ; +6
0269 7c           448         ld a,h                  ; +4
026a e6 80        449         and $80                 ; +7
026c cc 2a 02     450         call z,BANKUP ; this also sets HL to 8000 +17/10
026f 3a 00 40     451         LD A,($4000) 
0272 87           452         ADD A, A 
0273 38 fc        453         JR C,-4
0275 7e           454         LD A,(HL) 
0276 32 00 40     455         LD (FMREG0),A
0279 23           456         inc hl                  ; +6
027a 7c           457         ld a,h                  ; +4
027b e6 80        458         and $80                 ; +7
027d cc 2a 02     459         call z,BANKUP ; this also sets HL to 8000 +17/10
0280 3a 00 40     460         LD A,($4000) 
0283 87           461         ADD A, A 
0284 38 fc        462         JR C,-4
0286 7e           463         LD A,(HL) 
0287 32 01 40     464         LD (FMDAT0),A 
028a c3 47 01     465         JP PLAYLOOP
028d              466 ;;;;
028d              467 
028d              468 ZWAIT:
028d              469 ;;;;;;;;;;;;;;;;;;
028d              470 ; * A C
028d 3a 00 40     471         LD A,($4000) 
0290 87           472         ADD A, A 
0291 38 fc        473         JR C,-4
0293 c9           474         RET 
0294              475 ;;;;
0294              476 
0294              477 
0294              478 
0294              479 
0294              480 WRITEFM2:
0294              481 ;;;;;;;;;;;;;;;;
0294              482 ; HL = song byte
0294              483 ; * A
0294 23           484         inc hl                  ; +6
0295 7c           485         ld a,h                  ; +4
0296 e6 80        486         and $80                 ; +7
0298 cc 2a 02     487         call z,BANKUP ; this also sets HL to 8000 +17/10
029b 3a 00 40     488         LD A,($4000) 
029e 87           489         ADD A, A 
029f 38 fc        490         JR C,-4
02a1 7e           491         LD A,(HL) 
02a2 32 02 40     492         LD (FMREG1),A 
02a5 23           493         inc hl                  ; +6
02a6 7c           494         ld a,h                  ; +4
02a7 e6 80        495         and $80                 ; +7
02a9 cc 2a 02     496         call z,BANKUP ; this also sets HL to 8000 +17/10
02ac 3a 00 40     497         LD A,($4000) 
02af 87           498         ADD A, A 
02b0 38 fc        499         JR C,-4
02b2 7e           500         LD A,(HL) 
02b3 32 03 40     501         LD (FMDAT1),A 
02b6 c3 47 01     502         JP PLAYLOOP 
02b9              503 ;;;;
02b9              504 
02b9              505 WRITEPSG:
02b9              506 ;;;;;;;;;;;;;;;;
02b9              507 ; HL = song byte 
02b9              508 ; * A
02b9 23           509         inc hl                  ; +6
02ba 7c           510         ld a,h                  ; +4
02bb e6 80        511         and $80                 ; +7
02bd cc 2a 02     512         call z,BANKUP ; this also sets HL to 8000 +17/10
02c0              513         ;CALL ZWAIT 
02c0 7e           514         LD A,(HL) 
02c1 32 11 7f     515         ld (PSGREG),a 
02c4 c3 47 01     516         JP PLAYLOOP 
02c7              517 ;;;;
02c7              518 
02c7              519 
02c7              520 
02c7              521 SAMPLEWAIT:
02c7              522 ;;;;;;;;;;;
02c7              523 ; * A, B, C
02c7              524 ; HL = song byte
02c7 23           525         inc hl                  ; +6
02c8 7c           526         ld a,h                  ; +4
02c9 e6 80        527         and $80                 ; +7
02cb cc 2a 02     528         call z,BANKUP ; this also sets HL to 8000 +17/10
02ce 7e           529         ld a,(hl)
02cf 4f           530         ld c,a 
02d0 23           531         inc hl                  ; +6
02d1 7c           532         ld a,h                  ; +4
02d2 e6 80        533         and $80                 ; +7
02d4 cc 2a 02     534         call z,BANKUP ; this also sets HL to 8000 +17/10
02d7 7e           535         ld a,(hl)
02d8 47           536         ld b,a 
02d9 04           537         inc b ; FIXME: This is to fix the "too fast" sample wait
02da ed 43 0c 01  538         ld (SAMPTOWAIT),bc 
02de c3 47 01     539         JP PLAYLOOP 
02e1              540 
02e1              541 
02e1              542 
02e1              543 CLEARPSG:
02e1              544 ;;;;;;;;;;;;;;;;;;;;
02e1              545 ; clear the SSG (mute)
02e1              546 ; * A, B (preserve HL)
02e1 e5           547         push hl 
02e2 21 20 00     548         LD HL,CLRTB 
02e5 06 04        549         ld b,4
02e7              550 _clearlp:
02e7 7e           551         ld a,(hl) 
02e8 32 11 7f     552         ld (PSGREG),a 
02eb 23           553         inc hl                  ; +6
02ec 7c           554         ld a,h                  ; +4
02ed e6 80        555         and $80                 ; +7
02ef cc 2a 02     556         call z,BANKUP ; this also sets HL to 8000 +17/10
02f2 10 f3        557         djnz _clearlp
02f4 e1           558         pop hl 
02f5 c9           559         RET
02f6              560 ;;;;
02f6              561 
02f6              562 KHZRATE8: equ 134
02f6              563 
02f6              564 ;; DAC STUFF:
02f6              565 
02f6 00 00        566 DacWRAM: defb 0, 0
02f8              567 DACWORK
02f8 00 00 00 00  568         defb 0,0,0,0
02fc              569 
02fc 0a           570 Idles: defb $a
02fd              571 
02fd              572 
02fd              573 
02fd              574 DACTRANSFER:
02fd              575 ; CHECKS BOTH SAMPLE1ADDRESS AND SONGSAMPADDRESS EACH LOOP
02fd              576 ; SAMPLE1ADDRESS IS ACTIVE SFX 
02fd              577 ; SONGSAMPADDRESS IS ACTIVE MUSIC-BASED SAMPLE
02fd              578 ; WRITE ONE BYTE FROM EACH, INCREMENT RESPECTIVE POINTER
02fd              579 ; LOOP N KHZ TIMES
02fd              580 ; AT THE END OF EACH FRAME, ROTATE THE SFX AND MUSIC SAMPLE QUEUE TO ACTIVE ADDRESSES,
02fd              581 ;  UP TO 8, IF THEY EXIST. 
02fd              582 ; + WHEN STARTING A MUSIC SAMPLE OR SFX, ADD IT TO QUEUE INSTEAD.
02fd              583 ; + FRAME END: GRAB QUEUED U32 FROM BUS AND ADD TO END OF Q
02fd              584 ; + ONLY 1 SFX STARTABLE PER FRAME
02fd              585 
02fd              586 
02fd              587 
02fd              588 DACBLOCKTRANSFER:
02fd              589         ; DEBUG ret 
02fd              590 ;        ret
02fd af           591         xor a 
02fe e5           592         push hl 
02ff 2a 10 01     593          ld hl,(Sample1Address)
0302 ed 5b 12 01  594          ld de,(Sample1Address+2)
0306              595          ;add hl,de 
0306 b4           596          or h 
0307 b5           597          or l 
0308 b2           598          or d  ; 3 cycles faster
0309 b3           599          or e
030a 28 02        600          jr z,_nosample 
030c              601          ; ok, sample found
030c 18 02        602          jr _playsample
030e              603 _nosample:
030e e1           604         pop hl 
030f c9           605         ret 
0310              606 
0310              607 _playsample:
0310              608         ; PRESERVE CURRENT ROM BANK AND SONG PTR IN WORKRAM~+3
0310 3a 06 01     609          ld a,(RomBank) 
0313 32 f8 02     610          ld (DACWORK),a 
0316 af           611          xor a
0317 32 f9 02     612          ld (DACWORK+1),a     ; saving me for later!
031a e1           613         pop hl 
031b 22 fa 02     614         ld (DACWORK+2),hl    ; save hl ofc 
031e              615         
031e              616         ; change zadr to sample location
031e              617 _noin2
031e 2a 10 01     618         ld hl,(Sample1Address)
0321 22 b7 01     619         ld (ZadrWork),hl 
0324 2a 12 01     620         ld hl,(Sample1Address+2)
0327 22 b9 01     621         ld (ZadrWork+2),hl 
032a cd bb 01     622         call SETZADDRESS
032d              623         
032d              624         ; hl has address of sample, FIXME 184 samples/frame = ntsc/11khz
032d ed 4b e9 03  625         ld bc,(DacFrequency) ;KHZRATE8 ; 8kb sample in 1 second
0331              626         ; loop ....
0331              627         ; dac on 
0331 3e 2b        628         ld a,$2b 
0333 32 00 40     629         ld ($4000),a
0336 3e 80        630         ld a,$80
0338 32 01 40     631         ld ($4001),a
033b 3e 2a        632         ld a,$2a
033d 32 00 40     633         ld ($4000),a 
0340              634 _dacwriteloop:
0340              635 ;;; ONE SAMPLE AT 8KHZ, NTSC:
0340 00           636         NOP 
0341 00           637         nop 
0342 00           638         nop 
0343 00           639         nop 
0344 e5           640         push hl 
0345 21 0a 00     641         ld hl,$a ; < dont go higher than c!
0348              642 _atst
0348 00           643         NOP 
0349 7d           644         ld a,l 
034a b4           645         or h 
034b 2b           646         dec hl 
034c 20 fa        647         jr nz,_atst
034e e1           648         pop hl 
034f              649 ;;;
034f 7e           650         ld a,(hl)
0350 32 01 40     651         ld ($4001),a 
0353 23           652         inc hl                  ; +6
0354 7c           653         ld a,h                  ; +4
0355 e6 80        654         and $80                 ; +7
0357 cc 2a 02     655         call z,BANKUP ; this also sets HL to 8000 +17/10
035a 0b           656         dec bc 
035b 78           657         ld a,b 
035c b1           658         or c 
035d 20 e1        659         jr nz,_dacwriteloop
035f              660         ; dac off 
035f 3e 2b        661         ld a,$2b 
0361 32 00 40     662         ld ($4000),a
0364 af           663         xor a
0365 32 01 40     664         ld ($4001),a 
0368              665         
0368              666         ; add32 addr + freq 
0368 af           667         xor a   ; clc
0369 2a 10 01     668         ld hl,(Sample1Address)
036c ed 4b e9 03  669         ld bc,(DacFrequency)
0370 09           670         add hl,bc 
0371 22 10 01     671         ld (Sample1Address),hl 
0374              672         ;jr nc,_noincad
0374              673         ;ld hl, (Sample1Address+2)
0374              674         ;inc hl 
0374              675         ;ld (Sample1Address+2),hl 
0374              676 _noincad
0374              677 ; cmp32: Sample1Address vs Sample1Length 
0374              678 ; if = or < check low
0374 2a 14 01     679         ld hl,(Sample1Length)
0377 ed 4b 10 01  680         ld bc,(Sample1Address)
037b ed 42        681         sbc hl,bc 
037d 38 0a        682         jr c,_dacover  ; if cur adr > len end
037f              683         ;jr z,_dacover
037f              684 ;        ld hl,(Sample1Length+2)
037f              685 ;        ld bc,(Sample1Address+2)
037f              686 ;        sbc hl,bc 
037f              687 ;        jr c,_dacover ; if cur adr is > end
037f              688 _condac
037f 3a f8 02     689         ld a,(DACWORK)
0382 cd 06 02     690         call BANKSWAP
0385 2a fa 02     691         ld hl,(DACWORK+2)
0388 c9           692         ret
0389              693 _dacover:
0389 21 00 00     694         ld hl,0
038c 22 10 01     695         ld (Sample1Address),hl 
038f 22 12 01     696         ld (Sample1Address+2),hl
0392 22 14 01     697         ld (Sample1Length),hl 
0395 22 16 01     698         ld (Sample1Length+2),hl
0398              699         
0398 18 e5        700         jr _condac
039a              701 ;;;;
039a              702 
039a              703 QUICKSTOP:
039a              704 
039a c9           705         RET 
039b              706 
039b              707 STOPDAC:
039b              708 ;;;;;;;;;;;;;;
039b              709 ; Stops DAC and disables DAC mode on CH6
039b              710 ; FIXME broken ?
039b 23           711         inc hl                  ; +6
039c 7c           712         ld a,h                  ; +4
039d e6 80        713         and $80                 ; +7
039f cc 2a 02     714         call z,BANKUP ; this also sets HL to 8000 +17/10
03a2              715   
03a2 c3 47 01     716         jp PLAYLOOP  
03a5              717 ;;;
03a5              718 
03a5 00           719 StreamID: defb 0
03a6              720 
03a6              721 ;; Ignore DACSETUP because we dont care for meagdrive.
03a6              722 ; 90 0 2 0 2a 
03a6              723 ; TODO SUPPORT MORE THAN ONE DAC STREAM :)
03a6              724 DACSETUP: 
03a6              725         ;INC HL  ; set STREAM ID 
03a6 23           726         inc hl                  ; +6
03a7 7c           727         ld a,h                  ; +4
03a8 e6 80        728         and $80                 ; +7
03aa cc 2a 02     729         call z,BANKUP ; this also sets HL to 8000 +17/10
03ad              730         ; CHIP
03ad 23           731         inc hl                  ; +6
03ae 7c           732         ld a,h                  ; +4
03af e6 80        733         and $80                 ; +7
03b1 cc 2a 02     734         call z,BANKUP ; this also sets HL to 8000 +17/10
03b4              735         ; PORT 
03b4 23           736         inc hl                  ; +6
03b5 7c           737         ld a,h                  ; +4
03b6 e6 80        738         and $80                 ; +7
03b8 cc 2a 02     739         call z,BANKUP ; this also sets HL to 8000 +17/10
03bb              740         ; DATA BYTE 
03bb 23           741         inc hl                  ; +6
03bc 7c           742         ld a,h                  ; +4
03bd e6 80        743         and $80                 ; +7
03bf cc 2a 02     744         call z,BANKUP ; this also sets HL to 8000 +17/10
03c2              745         
03c2 c3 47 01     746         jp PLAYLOOP 
03c5              747 
03c5              748 ;; Ignore SETDACSTREAM because we control our own streams.
03c5              749 SETDACSTREAM:        
03c5              750 ; 0X91 <STREAM> <DATABANK ID> <STEP SIZE> <STEP BASE>
03c5              751 ;         0           0            1           0 
03c5              752 
03c5              753        ; STREAM ID AND DATABANK
03c5 23           754         inc hl                  ; +6
03c6 7c           755         ld a,h                  ; +4
03c7 e6 80        756         and $80                 ; +7
03c9 cc 2a 02     757         call z,BANKUP ; this also sets HL to 8000 +17/10
03cc 23           758         inc hl                  ; +6
03cd 7c           759         ld a,h                  ; +4
03ce e6 80        760         and $80                 ; +7
03d0 cc 2a 02     761         call z,BANKUP ; this also sets HL to 8000 +17/10
03d3              762         ;STEP AND STEP BASE
03d3 23           763         inc hl                  ; +6
03d4 7c           764         ld a,h                  ; +4
03d5 e6 80        765         and $80                 ; +7
03d7 cc 2a 02     766         call z,BANKUP ; this also sets HL to 8000 +17/10
03da 23           767         inc hl                  ; +6
03db 7c           768         ld a,h                  ; +4
03dc e6 80        769         and $80                 ; +7
03de cc 2a 02     770         call z,BANKUP ; this also sets HL to 8000 +17/10
03e1              771        ;pop bc 
03e1 c3 47 01     772         jp PLAYLOOP  
03e4              773 
03e4              774 _invfreq
03e4 88           775         defb $88
03e5 c3 e5 03     776 INVALIDFREQ: JP INVALIDFREQ 
03e8              777 
03e8              778 DacTransferActive: 
03e8 00           779         defb 0
03e9              780 DacFrequency:
03e9 8a 00        781         defw 138
03eb              782 RealFrequency: 
03eb 00 00 00 00  783         defb 0,0,0,0
03ef              784 
03ef              785 ; 
03ef              786 FreqTable:
03ef              787         ;DEFW 134,184,267,368,533
03ef 15 02 70 01 0b 01 b8 00 86 00  788         DEFW 533,368,267,184,134
03f9              789 PALFreqTable:
03f9              790         ;DEFW 160,221,320,441,640
03f9 80 02 b9 01 40 01 dd 00 a0 00  791         DEFW 640,441,320,221,160
0403              792 
0403              793 ; $92
0403              794 ;SETSTREAMFREQUENCY
0403              795 SETDACFREQ: ; 7D00 == 32000
0403              796 ; 7D00 = 32000 = 533 N 640P ; 
0403              797 ; 5622 = 22050 = 368 N 441P ; 
0403              798 ; 3E80 = 16000 = 267 N 320P ; 
0403              799 ; 2b11 = 11025 = 184 N 221P
0403              800 ; 1f40 = 8000 =  134 N 160P
0403              801         
0403              802         ; stream :
0403 23           803         inc hl                  ; +6
0404 7c           804         ld a,h                  ; +4
0405 e6 80        805         and $80                 ; +7
0407 cc 2a 02     806         call z,BANKUP ; this also sets HL to 8000 +17/10
040a              807         ; byte 0
040a 23           808         inc hl                  ; +6
040b 7c           809         ld a,h                  ; +4
040c e6 80        810         and $80                 ; +7
040e cc 2a 02     811         call z,BANKUP ; this also sets HL to 8000 +17/10
0411              812         ; byte 1
0411 23           813         inc hl                  ; +6
0412 7c           814         ld a,h                  ; +4
0413 e6 80        815         and $80                 ; +7
0415 cc 2a 02     816         call z,BANKUP ; this also sets HL to 8000 +17/10
0418 7e           817         ld a,(hl)
0419 e5           818          push hl 
041a 21 ef 03     819          ld hl,FreqTable
041d c5           820          push bc 
041e 01 0a 00     821          ld bc,10 
0421 f5           822          push af 
0422 3a 08 01     823          ld a,(PALFlag)
0425 fe 01        824          cp 1
0427 20 01        825          jr nz,_notpal
0429 09           826          add hl,bc 
042a              827 _notpal:
042a f1           828         pop af 
042b 01 00 00     829         ld bc,0
042e fe 7d        830         cp $7d 
0430 28 27        831         jr z,_ffr
0432 fe 56        832         cp $56 
0434 28 0f        833         jr z,_bb 
0436 fe 3e        834         cp $3e 
0438 28 10        835         jr z,_cc 
043a fe 2b        836         cp $2b 
043c 28 11        837         jr z,_dd 
043e fe 1f        838         cp $1f 
0440 28 12        839         jr z,_ee 
0442              840         ; else:
0442 c3 e5 03     841         jp INVALIDFREQ
0445              842 _bb
0445 01 02 00     843         ld bc,2
0448 18 0f        844         jr _ffr
044a              845 _cc 
044a 01 04 00     846         ld bc,4
044d 18 0a        847         jr _ffr
044f              848 _dd 
044f 01 06 00     849         ld bc,6
0452 18 05        850         jr _ffr
0454              851 _ee 
0454 01 08 00     852         ld bc,8
0457 18 00        853         jr _ffr
0459              854 _ffr:
0459 09           855         add hl,bc ; hl = freqtable + palflag*10 + freq# offset
045a 4e           856         ld c,(hl)
045b 23           857         inc hl 
045c 46           858         ld b,(hl)
045d ed 4b e9 03  859         ld bc,(DacFrequency)
0461 c1           860     pop bc 
0462 e1           861     pop hl 
0463              862     ; both 0
0463 23           863         inc hl                  ; +6
0464 7c           864         ld a,h                  ; +4
0465 e6 80        865         and $80                 ; +7
0467 cc 2a 02     866         call z,BANKUP ; this also sets HL to 8000 +17/10
046a 23           867         inc hl                  ; +6
046b 7c           868         ld a,h                  ; +4
046c e6 80        869         and $80                 ; +7
046e cc 2a 02     870         call z,BANKUP ; this also sets HL to 8000 +17/10
0471 c3 47 01     871     jp PLAYLOOP 
0474              872 
0474              873 
0474              874 ;;;;;;;;;;;;;;;;;
0474              875 STARTDACSTREAM:
0474              876 ;        inc hl  ; stream id 
0474              877         ; TODO NOT USED IN MY EXAMPLES
0474 18 fe        878         JR STARTDACSTREAM
0476              879 
0476              880 GETBLOCKSTRUCT:
0476              881 ;;;;;;;;;;;;;;;;;;
0476              882 ; IN: [A]
0476              883 ; OUT: HL
0476              884 ; PRESERVES BC 
0476              885 ; * A H L 
0476 c9           886         RET 
0477              887 
0477              888 ; 95 00 (0-15) 00
0477 00           889 ActiveDacBlock: defb 0  ; which block 0-15 stored below
0478 00 00 00 00  890 ActiveDacCtr: defb 0,0,0,0 ; 32bit count
047c 00 00        891 ActiveDacLoc: defb 0,0  ; what is the memory offset
047e 00           892 ActiveDacBank: defb 0   ; which 68000 memory bank
047f 00           893 LoopDac: defb 0
0480              894 
0480              895 DACFASTCALL:
0480              896 ;;;;;;;;;;;;;;;;;;;;;;;;
0480              897 ; This should start the DAC playback
0480              898 ; 95 00 IDID 00
0480              899 ; for data block info:
0480              900 ; data type 1
0480              901 ; datasize 4
0480              902 ; dataloc 2  (hl) 
0480              903 ; databank 1 (rom)
0480              904 ; datacounter 4 (bytes left this loop)
0480              905 ; blockactive 1 (gogogo)
0480              906 ; 0X95
0480              907 ; NOTE: Optimized using processvgm.py, only has 1 byte argument
0480 23           908         inc hl                  ; +6
0481 7c           909         ld a,h                  ; +4
0482 e6 80        910         and $80                 ; +7
0484 cc 2a 02     911         call z,BANKUP ; this also sets HL to 8000 +17/10
0487 23           912         inc hl                  ; +6
0488 7c           913         ld a,h                  ; +4
0489 e6 80        914         and $80                 ; +7
048b cc 2a 02     915         call z,BANKUP ; this also sets HL to 8000 +17/10
048e 23           916         inc hl                  ; +6
048f 7c           917         ld a,h                  ; +4
0490 e6 80        918         and $80                 ; +7
0492 cc 2a 02     919         call z,BANKUP ; this also sets HL to 8000 +17/10
0495 23           920         inc hl                  ; +6
0496 7c           921         ld a,h                  ; +4
0497 e6 80        922         and $80                 ; +7
0499 cc 2a 02     923         call z,BANKUP ; this also sets HL to 8000 +17/10
049c c3 47 01     924         jp PLAYLOOP 
049f              925 
049f              926 
049f              927 ;; 
049f              928 
049f              929 ;;
049f              930 
049f              931 ; Data Block struct:
049f ff           932 DataType: defb $ff
04a0 00 00 00 00  933 DataSize: defb 0,0,0,0
04a4 00 00        934 DataLoc: defb 0,0               ; hl 
04a6 00           935 DataBank: defb 0                ; current rombank
04a7 00 00 00 00  936 DataCounter: defb 0,0,0,0       ; equals DataSize when intialized
04ab 00           937 BlockActive: defb 0
04ac 00 00 00     938 _buffer: defb 0,0,0          ; 16 bytes 
04af              939 ;Type (ff means empty) 1
04af              940 ; Compatible types:
04af              941 ; 0: YM2612 PCM data 
04af              942 ;Size 4
04af              943 ; 32 bit size (from VGM file)
04af              944 ;Loc 2 (HL offset of data start)
04af              945 ;Bank 1 (bank of data start)
04af              946 ;Counter 4 (32bit offset remaining to play of this loop)
04af              947 ;BlockActive: 1 if we need to dac stream it, 0 skips
04af              948 ;_buffer 3 : to align to 16 bytes
04af ff 00 00 00 00 00 00 00  949 Block1: defb $ff,0,0,0,0,0,0,0
04b7 00 00 00 00 00 00 00 00  950         defb $0,0,0,0,0,0,0,0
04bf ff 00 00 00 00 00 00 00  951 Block2: defb $ff,0,0,0,0,0,0,0
04c7 00 00 00 00 00 00 00 00  952         defb $0,0,0,0,0,0,0,0
04cf ff 00 00 00 00 00 00 00  953 Block3: defb $ff,0,0,0,0,0,0,0
04d7 00 00 00 00 00 00 00 00  954         defb $0,0,0,0,0,0,0,0
04df ff 00 00 00 00 00 00 00  955 Block4: defb $ff,0,0,0,0,0,0,0
04e7 00 00 00 00 00 00 00 00  956         defb $0,0,0,0,0,0,0,0
04ef ff 00 00 00 00 00 00 00  957 Block5: defb $ff,0,0,0,0,0,0,0
04f7 00 00 00 00 00 00 00 00  958         defb $0,0,0,0,0,0,0,0
04ff ff 00 00 00 00 00 00 00  959 Block6: defb $ff,0,0,0,0,0,0,0
0507 00 00 00 00 00 00 00 00  960         defb $0,0,0,0,0,0,0,0
050f ff 00 00 00 00 00 00 00  961 Block7: defb $ff,0,0,0,0,0,0,0
0517 00 00 00 00 00 00 00 00  962         defb $0,0,0,0,0,0,0,0
051f ff 00 00 00 00 00 00 00  963 Block8: defb $ff,0,0,0,0,0,0,0
0527 00 00 00 00 00 00 00 00  964         defb $0,0,0,0,0,0,0,0
052f ff 00 00 00 00 00 00 00  965 Block9: defb $ff,0,0,0,0,0,0,0
0537 00 00 00 00 00 00 00 00  966         defb $0,0,0,0,0,0,0,0
053f ff 00 00 00 00 00 00 00  967 Block10: defb $ff,0,0,0,0,0,0,0
0547 00 00 00 00 00 00 00 00  968         defb $0,0,0,0,0,0,0,0
054f ff 00 00 00 00 00 00 00  969 Block11: defb $ff,0,0,0,0,0,0,0
0557 00 00 00 00 00 00 00 00  970         defb $0,0,0,0,0,0,0,0
055f ff 00 00 00 00 00 00 00  971 Block12: defb $ff,0,0,0,0,0,0,0
0567 00 00 00 00 00 00 00 00  972         defb $0,0,0,0,0,0,0,0
056f ff 00 00 00 00 00 00 00  973 Block13: defb $ff,0,0,0,0,0,0,0
0577 00 00 00 00 00 00 00 00  974         defb $0,0,0,0,0,0,0,0
057f ff 00 00 00 00 00 00 00  975 Block14: defb $ff,0,0,0,0,0,0,0
0587 00 00 00 00 00 00 00 00  976         defb $0,0,0,0,0,0,0,0
058f ff 00 00 00 00 00 00 00  977 Block15: defb $ff,0,0,0,0,0,0,0
0597 00 00 00 00 00 00 00 00  978         defb $0,0,0,0,0,0,0,0
059f              979 
059f 00 00        980 DBWORK: defb 0,0
05a1              981 
05a1              982 ProcessSampleQueue:
05a1 c9           983         ret 
05a2              984 
05a2              985 DATABLOCK:
05a2              986 ;;;;;;;;;;;;
05a2              987 ;
05a2 d5           988       push de 
05a3 23           989         inc hl                  ; +6
05a4 7c           990         ld a,h                  ; +4
05a5 e6 80        991         and $80                 ; +7
05a7 cc 2a 02     992         call z,BANKUP ; this also sets HL to 8000 +17/10
05aa 7e           993         ld a,(hl) 
05ab              994         ; find an empty block of pointers
05ab e5           995         push hl ;9f43 = 66
05ac 21 8f 04     996          ld hl,DataType-16
05af 01 10 00     997          ld bc,16      ; 16 BYTES IN SIZE 
05b2              998 _blockfind:
05b2 af           999          xor a 
05b3 ed 4a       1000          adc hl,bc 
05b5 7e          1001          ld a,(hl)    ; hl += 16
05b6 fe ff       1002          cp $ff 
05b8 28 02       1003          jr z,_blockok 
05ba 18 f6       1004          jr _blockfind 
05bc             1005 _blockok:         
05bc e5          1006          push hl 
05bd c1          1007          pop bc ; now BC has block struct pointer. 
05be ed 43 9f 05 1008          LD (DBWORK),BC 
05c2 e1          1009         pop hl                  
05c3             1010 
05c3 23          1011         inc hl                  ; +6
05c4 7c          1012         ld a,h                  ; +4
05c5 e6 80       1013         and $80                 ; +7
05c7 cc 2a 02    1014         call z,BANKUP ; this also sets HL to 8000 +17/10
05ca 7e          1015         ld a,(hl) 
05cb 02          1016         ld (bc),a  ; data type  ; = 0
05cc 23          1017         inc hl                  ; +6
05cd 7c          1018         ld a,h                  ; +4
05ce e6 80       1019         and $80                 ; +7
05d0 cc 2a 02    1020         call z,BANKUP ; this also sets HL to 8000 +17/10
05d3             1021         ; TODO: Check data type
05d3             1022         
05d3 03          1023         inc bc 
05d4 7e          1024         ld a,(hl)  ; 9f45 = 77
05d5 02          1025         ld (bc),a ; data size
05d6 32 29 00    1026         ld (WORKRAM),a 
05d9 23          1027         inc hl                  ; +6
05da 7c          1028         ld a,h                  ; +4
05db e6 80       1029         and $80                 ; +7
05dd cc 2a 02    1030         call z,BANKUP ; this also sets HL to 8000 +17/10
05e0             1031         
05e0 7e          1032         ld a,(hl)
05e1 03          1033         inc bc  
05e2 02          1034         ld (bc),a ; data size+1 = 0c
05e3 32 2a 00    1035         ld (WORKRAM+1),a ; for later
05e6 23          1036         inc hl                  ; +6
05e7 7c          1037         ld a,h                  ; +4
05e8 e6 80       1038         and $80                 ; +7
05ea cc 2a 02    1039         call z,BANKUP ; this also sets HL to 8000 +17/10
05ed             1040         
05ed 03          1041         inc bc 
05ee 7e          1042         ld a,(hl) 
05ef 02          1043         ld (bc),a ; data size+2 = 00
05f0 32 2b 00    1044         ld (WORKRAM+2),a 
05f3 23          1045         inc hl                  ; +6
05f4 7c          1046         ld a,h                  ; +4
05f5 e6 80       1047         and $80                 ; +7
05f7 cc 2a 02    1048         call z,BANKUP ; this also sets HL to 8000 +17/10
05fa             1049         
05fa 03          1050         inc bc 
05fb 7e          1051         ld a,(hl) 
05fc 02          1052         ld (bc),a ; data size+3 = 00
05fd 32 2c 00    1053         ld (WORKRAM+3),a 
0600             1054         
0600             1055         ; now store HL, which is right before data start...
0600 03          1056         inc bc 
0601 7d          1057         ld a,l   ; dataloc l...
0602 02          1058         ld (bc),a 
0603             1059         
0603 7c          1060         ld a,h   ; and h
0604 03          1061         inc bc 
0605 02          1062         ld (bc),a ;
0606             1063         
0606 3a 06 01    1064         ld a,(RomBank) 
0609 03          1065         inc bc     ; DataBank
060a 02          1066         ld (bc),a ; and store current rom bank, cuz this must be where it starts
060b 32 b7 01    1067         ld (ZadrWork),a 
060e af          1068         xor a 
060f 32 b8 01    1069         ld (ZadrWork+1),a 
0612 22 b9 01    1070         ld (ZadrWork+2),hl ; 0, 0, 9a9f ( = 1a9f)
0615             1071 ;Counter 4 (32bit offset remaining to play of this loop)
0615 2a 29 00    1072         ld hl,(WORKRAM) 
0618 7d          1073         ld a,l 
0619 03          1074         inc bc     ; ctr+0
061a 02          1075         ld (bc),a 
061b 7c          1076         ld a,h 
061c 03          1077         inc bc 
061d 02          1078         ld (bc),a  ; ctr+1 
061e 2a 2b 00    1079         ld hl,(WORKRAM+2) 
0621 7d          1080         ld a,l 
0622 03          1081         inc bc   ; ctr+2
0623 02          1082         ld (bc),a 
0624 7c          1083         ld a,h 
0625 03          1084         inc bc 
0626 02          1085         ld (bc),a  ; ctr+3 
0627             1086         ; BlockActive starts at 0, we set it to 1 when we hit FASTCALL. 
0627             1087         ; so ignore the rest.
0627             1088 
0627             1089         ; NEW FUNCTION: Get 68000 address from current bank/HL
0627 cd 38 02    1090         call GETROMADDRESS
062a             1091         ; ZadrWork = 32bit address of data bank start 
062a             1092         ; WORKRAM = data size 
062a             1093         ; add WORKRAM to ZadrWork
062a 2a b7 01    1094         ld hl,(ZadrWork) ; 
062d ed 4b 29 00 1095         ld bc,(WORKRAM)  ; data size low 16 
0631 b7          1096         or a 
0632 ed 4a       1097         adc hl,bc ; check carry 
0634 22 b7 01    1098         ld (ZadrWork),hl ; save low 16
0637 2a b9 01    1099         ld hl,(ZadrWork+2) 
063a 01 00 00    1100         ld bc,$0000
063d ed 4a       1101         adc hl,bc  ; ok  ; carry is cleared here)
063f ed 4b 2b 00 1102         ld bc,(WORKRAM+2) 
0643 ed 4a       1103         adc hl,bc  ; upper 16
0645 22 b9 01    1104         ld (ZadrWork+2),hl 
0648 cd bb 01    1105         call SETZADDRESS  ; s
064b             1106         ; now our song pointer and rom window should be
064b             1107         ; at the byte following the data block -1.
064b d1          1108      pop de 
064c             1109 _compressed: ; TODO do extra stuff for compressed data
064c             1110 _uncompressed:
064c c3 47 01    1111         jp PLAYLOOP     
064f             1112 
064f             1113 _emptyblock
064f 3e ff       1114         LD A,$FF 
0651 e5          1115         PUSH HL 
0652 2a 9f 05    1116         LD HL,(DBWORK) 
0655 77          1117         LD (HL),A 
0656 e1          1118         POP HL 
0657 d1          1119         POP DE 
0658 c3 47 01    1120         JP PLAYLOOP 
065b             1121 
1564 bytes code generated and 151 labels defined
