0000                1 ;;;;;;;;;;;;;;;;;
0000                2 ;;
0000                3 ;; Z80 VGM Player
0000                4 ;; 
0000                5 ;; v 0.25
0000                6 ; WARNING: 68k side addresses changed from a00080+ to a00100+
0000                7 ; Set to NTSC 
0000                8 ; Samples currently OFF while debugging
0000                9 ; Watch for macros
0000               10 
0000               11 ; by RetroDevDiscord
0000               12 
0000               13 ; Special thanks to: 
0000               14 ;  Stef 
0000               15 ;  vytah
0000               16 
0000               17 ;;; TO USE: 
0000               18 ; Set byte a00100 to 1 every vblank to play!
0000               19 ; read byte a00101 to see if song is playing or not.
0000               20 ; Set SongBaseAddress (102h-105h) to full 32bit address 
0000               21 ; and RomBank (106h) to bit 15+ of the 68000 memory bank
0000               22 ; If PAL, set the PAL flag to 1 (108h), otherwise, 0=NTSC
0000               23 
0000               24 ; TODOS:
0000               25 ; - Tie z80 to vblank interrupt so it isn't driven by 68000
0000               26 ; - Add error checking for vgm 1.60
0000               27 ; - weirder bytecodes 
0000               28 ; - multiple sample streams 
0000               29 ; - WIP: multiple data blocks
0000               30 
0000               31 ;;;;;
0000               32 ; FIXMEs
0000               33 ; - copy and paste CurDac stuff within dac loop 
0000               34 ; - dac block transfer size needs adjusting / delay based on sample width!
0000               35 
0000               36 
0000               37 FMREG0 EQU $4000
0000               38 FMDAT0 EQU $4001
0000               39 FMREG1 EQU $4002
0000               40 FMDAT1 EQU $4003
0000               41 BANKREG EQU $6000
0000               42 PSGREG EQU $7F11
0000               43 
0000               44 
0000               45 VGM_START EQU $00 
0000               46 VGM_END EQU $04       ;*: ; 2004-2005
0000               47 SSGCLOCK EQU $0C      ; : ; 200c-200f
0000               48 SAMPLECOUNT EQU $18   ;*:  ; 2018-201b 0X22740
0000               49 LOOPOFFSET EQU $1c    ;*: 201c-201f
0000               50 LOOPNUMS EQU $20      ;*:   ; 2020-2023
0000               51 RATE EQU $24          ;:   ; 2024-2027 = 60
0000               52 SNFB EQU $28          ;*?:  ; 2028-9 = 0009
0000               53 SNW EQU $2a           ;*?; 202a = 16
0000               54 SF EQU $2b            ;*:    ; 202b ; ssg flags all 0
0000               55 YM2612CLK EQU $2C     ;: ; 202c-202f = 0x750ab6 
0000               56 VGMDATOFS EQU $34     ;*:  ; 2034-2037
0000               57 ;SPCMCLK EQU $2038       ;:    ; 2038-203b
0000               58 ;SPCMI EQU $203C         ;:   ; 203c-203f
0000               59 VM EQU $7C            ;: volume modifier (default 0) ; 207c
0000               60 LB EQU $7E            ;: loop base; 207e
0000               61 LM EQU $7F            ;: loop modifier; 207f
0000               62         
0000               63         org $0
0000               64 
0000               65 ; disable interrupts
0000 f3            66         di 
0001               67 
0001               68 ; clear the stack
0001 3e 00         69         ld a, 0
0003 11 00 1c      70         ld de, $1c00 
0006 06 00         71         ld b, 0 
0008               72 _clrstack:
0008 12            73         LD (DE),A
0009 13            74         inc de 
000a 10 fc         75         djnz _clrstack
000c               76 _clr2
000c 12            77         ld (de),a 
000d 13            78         inc de 
000e 10 fc         79         djnz _clr2
0010               80 _clr3 
0010 12            81         ld (de),a 
0011 13            82         inc de 
0012 10 fc         83         djnz _clr3
0014               84 
0014               85 ; set the stack pointer 
0014 31 80 1d      86         ld sp,$1d80 
0017               87 
0017               88 ; clear and go!
0017 cd 02 03      89         call CLEARPSG 
001a cd 27 02      90         call BANKSWAP
001d               91 
001d c3 1c 01      92         jp LOADVGM 
0020               93         
0020               94 ; +8 and +9 should contain VGM version number.
0020               95 ;VERSIONCHECK:
0020               96 ;        ld hl, ($2008) 
0020               97 ;        cp h, $60
0020               98 ;        jr nz,WRONGVER
0020               99 ;        cp l, $01
0020              100 ;        jr nz,WRONGVER 
0020              101 ;        jp LOADVGM
0020              102 ;WRONGVER:
0020              103 ;        jp WRONGVER
0020              104 
0020              105 CLRTB:
0020 9f bf df ff  106         defb $9f,$bf,$df,$ff
0024              107 LoopPlay: 
0024 00           108         defb 0
0025              109 LoopLoc:        
0025 00 00 00 00  110         defb 0,0,0,0
0029              111 
0029 00 00 00 00  112 WORKRAM: defb 0,0,0,0
002d              113 
002d 00 00 00 00  114 SongDataStart: defb 0,0,0,0
0031              115 
0031              116 
0031              117 ; sub 50h then times 2
0031              118 CMDJUMPTABLE: ; starts at 50h
0031 da 02 00 00 89 02 b5 02 00 00 00 00 00 00 00 00  119         defw WRITEPSG, 0, WRITEFM1, WRITEFM2, 0, 0, 0, 0 ; 50-57
0041 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  120         DEFW 0, 0, 0, 0, 0, 0, 0, 0 ;   58-5F
0051 00 00 e8 02 84 01 84 01 00 00 00 00 a2 01 7b 05  121         defw 0, SAMPLEWAIT, FRAMEOVER, FRAMEOVER, 0, 0, SONGOVER, DATABLOCK ; 60-67
0061 a9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  122         DEFW WRITEPCM, 0, 0, 0, 0, 0, 0, 0
0071 ad 01 ad 01 ad 01 ad 01 ad 01 ad 01 ad 01 ad 01  123         DEFW QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT ;70
0081 ad 01 ad 01 ad 01 ad 01 ad 01 ad 01 ad 01 ad 01  124         DEFW QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT ;7F   
0091 c3 01 c3 01 c3 01 c3 01 c3 01 c3 01 c3 01 c3 01  125         DEFW QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT
00a1 c3 01 c3 01 c3 01 c3 01 c3 01 c3 01 c3 01 c3 01  126         DEFW QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT ;..8f
00b1 c9 03 e8 03 28 04 4e 04 be 03 5a 04  127         DEFW DACSETUP, SETDACSTREAM, SETDACFREQ, STARTDACSTREAM, STOPDAC, DACFASTCALL ; 90-95
00bd 9e 01 18 01  128         DEFW ERROR, FOREVERLOOP  ; 96, 97
00c1              129 
00c1              130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00c1              131 
00c1              132         org $100
0100              133 
0100              134 ; Vars
0100              135 PlayNext:
0100 00           136         defb 0          ; 100h
0101              137 SongPlaying: 
0101 00           138         defb 0          ; 101h
0102              139 SongBaseAddress:        ; Set me when loading the song from the 68000!
0102 00 00 00 00  140         defb $0, $0, 0, 0 ; 102-105h
0106              141 RomBank:
0106 00           142         defb 0          ; 106h
0107              143 StartBank:
0107 00           144         defb 0          ; --
0108              145 ; This is 0 if NTSC, and 1 if PAL.
0108 00           146 PALFlag: defb 0         ; 108h
0109              147 ; Set this to 1 and the next frame the Z80 will reset (jp 0). 
0109              148 ; Do this after changing SongBaseAddress to change songs. 
0109 00           149 ResetFlag: defb 0       ; 109h
010a              150 
010a              151 FREECYCLES: ; 10Ah
010a 00 00        152         defw 0 
010c              153 SAMPTOWAIT:
010c 00 00        154         defw 0
010e              155 LOCALEWAIT: 
010e 00 00        156         defw 0
0110              157 PALWAIT equ 882 
0110              158 NTSCWAIT equ 735
0110              159 
0110 00 00 00 00  160 Sample1Address: defw 0,0        
0114 00 00 00 00  161 Sample1Length:  defw 0,0         ; this is also the address of the next sample in block.
0118              162 
0118              163 FOREVERLOOP:
0118 2b           164         dec hl 
0119 c3 84 01     165         jp FRAMEOVER
011c              166 
011c              167 LOADVGM:
011c              168 ;;;;;;;;;;;;;;;;
011c 3a 08 01     169         ld a,(PALFlag)
011f fe 00        170         cp 0
0121 28 08        171         jr z,_ntw
0123 21 72 03     172         ld hl,PALWAIT
0126 22 0e 01     173         ld (LOCALEWAIT),hl 
0129 18 06        174         jr _ld 
012b              175 _ntw:
012b 21 df 02     176         ld hl,NTSCWAIT
012e 22 0e 01     177         ld (LOCALEWAIT),hl 
0131              178 _ld:
0131              179         ;LD A,1 
0131              180         ;LD (SongPlaying),A      ; set playing var to ON
0131 3a 06 01     181         LD A,(RomBank) 
0134 32 07 01     182         LD (StartBank),A        ; Store the initial ROM bank for looping.
0137              183         
0137              184 ; Set the memory window to the song header (+1c)      
0137              185         ;ld hl,(SongBaseAddress)
0137              186         ;ld bc,$001c 
0137              187         ;xor a 
0137              188         ;adc hl,bc 
0137              189         ;ld (ZadrWork),hl 
0137              190         ;ld hl,(SongBaseAddress+2)
0137              191         ;ld bc,$0000
0137              192         ;adc hl,bc               ; catch the carry
0137              193         ;ld (ZadrWork+2),hl
0137              194         ;call SETZADDRESS        ; set bank to song base address + 1c!
0137              195 
0137              196 noloop:
0137              197 ; Now set HL to song data pointer - longword at 0x0034 into the VGM header 
0137 2a 02 01     198         ld hl,(SongBaseAddress)    ; 00001ef7, need to add 83 to skip header and
013a              199                                    ; byte size
013a              200         ;ld bc, $0080            ; skip the header
013a              201         ;xor a 
013a              202         ;adc hl,bc  ; 0x100              ; 1f2b 1f2e is wrong! should be 1f7a
013a 22 d8 01     203         ld (ZadrWork),hl           ; 16bit addition ; START BAD CODE
013d              204         ;ld bc,$0000
013d 2a 04 01     205         ld hl,(SongBaseAddress+2)
0140              206         ;adc hl,bc ; catch the carry 
0140 22 da 01     207         ld (ZadrWork+2),hl              ; < ok
0143 cd dc 01     208         call SETZADDRESS   
0146              209 
0146              210 
0146 2b           211         dec hl  ;) < go down one because we call GetNextSongByte below
0147              212 PLAYLOOP:
0147              213 ;;;;;;;;;;;;;;;;               ; +27..400
0147 3a 0c 01     214         ld a,(SAMPTOWAIT)
014a b7           215         or a 
014b 28 1e        216         jr z, _nosampwt
014d e5           217         push hl 
014e 2a 0c 01     218          ld hl,(SAMPTOWAIT)
0151 ed 4b 0e 01  219          ld bc,(LOCALEWAIT) 
0155 ed 42        220          sbc hl,bc
0157 fa 61 01     221          jp m,_zero 
015a 22 0c 01     222          ld (SAMPTOWAIT),hl 
015d e1           223         pop hl 
015e c3 84 01     224         jp FRAMEOVER ; SKIP THIS FRAME IF TIME REMAINS.
0161              225 _zero:
0161 21 00 00     226          ld hl, 0
0164 22 0c 01     227          ld (SAMPTOWAIT), hl 
0167 e1           228         pop hl 
0168 c3 84 01     229         jp FRAMEOVER 
016b              230 _nosampwt:
016b 23           231         inc hl                  ; +6
016c 7c           232         ld a,h                  ; +4
016d e6 80        233         and $80                 ; +7
016f cc 4b 02     234         call z,BANKUP ; this also sets HL to 8000 +17/10
0172 7e           235         LD A,(HL)
0173              236         ; sub 50h, times 2 + &CMDJUMPTABLE
0173 16 50        237         ld d,$50
0175 92           238         sub d 
0176 cb 27        239         sla a ; a = (a-50)*2 + jumptab
0178 01 31 00     240         ld bc,CMDJUMPTABLE 
017b 81           241         add a,c   ; bc+a =>
017c 4f           242         ld c,a    ;  de
017d 0a           243         ld a,(bc) 
017e 5f           244         ld e,a 
017f 03           245         inc bc 
0180 0a           246         ld a,(bc) 
0181 57           247         ld d,a
0182 d5           248         push de 
0183 c9           249         ret 
0184              250 
0184              251 
0184              252 FRAMEOVER:
0184              253 ;;;;;;;;;;;
0184              254 ; * A
0184              255 ; Waits until next vblank signal (done via 68k)
0184              256         ; Before checking 68k vbl, we need to see if DAC are queued.
0184              257         ;LD A,(DacTransferActive) 
0184              258         ;cp 0 
0184 cd 1d 03     259         call DACBLOCKTRANSFER ; MAD TESTING BRUH
0187 01 00 00     260         ld bc,0
018a              261 _framewait:
018a 03           262         inc bc 
018b 3a 00 01     263         LD A,(PlayNext)  ; check the 'play next frame' var
018e fe 01        264         CP 1             ; is it = 1?
0190 20 f8        265         JR NZ,_framewait  ; if not, loop.
0192 af           266         xor a            ; if it is, clear it.
0193 32 00 01     267         ld (PlayNext),a 
0196 ed 43 0a 01  268         ld (FREECYCLES),bc
019a c3 47 01     269         JP PLAYLOOP 
019d              270 ;;;; 
019d              271 
019d              272 
019d              273 ;;;;;;;;;;;;;;;;;;;
019d 99           274 ERRDEFB: DEFB $99
019e              275 ; This error handling is super rudimentary and only intended to get songs to
019e              276 ;  play without crashing!
019e              277 ERROR:  
019e              278         ;jp ERROR 
019e c3 1c 01     279         jp LOADVGM
01a1              280 
01a1 55           281 _songoverb: defb $55
01a2              282 SONGOVER:
01a2              283 ;;;;;;;;;;;
01a2              284 ; * A
01a2              285 ; Stops the song when hits command byte 0x66
01a2              286 ;  Or, if looping, jumps to loop
01a2 c3 1c 01     287         jp LOADVGM
01a5              288 
01a5              289 
01a5              290 VOLUMESET:
01a5              291         ;JP PLAYLOOP  
01a5 c3 a5 01     292         JP VOLUMESET 
01a8              293         
01a8              294 
01a8 11           295 aaa: defb $11
01a9              296 WRITEPCM:
01a9              297         ;jp PLAYLOOP  
01a9 c3 a9 01     298         JP WRITEPCM 
01ac 22           299 bbb: defb $22
01ad              300 ; Waits 1-16 samples
01ad              301 QWAIT:
01ad              302         ;jp QWAIT
01ad              303         ; TOO SHORT TO NOTICE?
01ad e6 0f        304         and $0f 
01af cb 27        305         sla a 
01b1 cb 27        306         sla a
01b3 cb 27        307         sla a
01b5 cb 27        308         sla a
01b7 47           309         ld b,a 
01b8 0e 00        310         ld c,0 
01ba              311 _qwl:   ; idk what to do other than skip 256*n cycles
01ba 0b           312         dec bc 
01bb 79           313         ld a,c 
01bc b0           314         or b 
01bd 20 fb        315         jr nz, _qwl
01bf c3 84 01     316         JP FRAMEOVER 
01c2 33           317 ccc: defb $33
01c3              318 QFMWAIT:
01c3 e6 0f        319         and $0f 
01c5 cb 27        320         sla a
01c7 cb 27        321         sla a 
01c9 cb 27        322         sla a
01cb cb 27        323         sla a
01cd 47           324         ld b,a 
01ce 0e 00        325         ld c,0 
01d0 0b           326 _qfl:   dec bc 
01d1 79           327         ld a,c 
01d2 b0           328         or b 
01d3 20 fb        329         jr nz, _qfl
01d5              330 ; TODO: send N samples from this data block
01d5 c3 84 01     331         jp FRAMEOVER 
01d8              332         ;JP QFMWAIT 
01d8              333 
01d8 00 00 00 00  334 ZadrWork: defb 0,0,0,0
01dc              335 
01dc              336 SETZADDRESS:
01dc              337 ;;;;;;;;;;;;;;;;;;
01dc              338 ; * A H L, RomBank, ZadrWork, 
01dc              339 ; Input: ZadrWork 32-bit address (68000 memory)
01dc              340 ; Output: changes active rom bank, and sets HL to mem addr
01dc 2a d9 01     341         ld hl,(ZadrWork+1) ; ignore bits 0-7, so we have 8-23
01df af           342         xor a ; clc 
01e0 cb 3c        343         srl h
01e2 cb 1d        344         rr l   ; hl >> 1
01e4 cb 3c        345         srl h
01e6 cb 1d        346         rr l   ; hl >> 2
01e8 cb 3c        347         srl h
01ea cb 1d        348         rr l   ; hl >> 3
01ec cb 3c        349         srl h
01ee cb 1d        350         rr l   ; hl >> 4
01f0 cb 3c        351         srl h
01f2 cb 1d        352         rr l   ; hl >> 5
01f4 cb 3c        353         srl h
01f6 cb 1d        354         rr l   ; hl >> 6
01f8 cb 3c        355         srl h
01fa cb 1d        356         rr l   ; hl >> 7 
01fc 7d           357         ld a,l 
01fd 32 06 01     358         ld (RomBank),a ; BITS 15-22
0200 3a 00 40     359         LD A,($4000) 
0203 87           360         ADD A, A 
0204 38 fc        361         JR C,-4
0206 cd 27 02     362         call BANKSWAP
0209 2a d8 01     363         LD HL,(ZadrWork)  ; 0-15 
020c 3e 7f        364         ld a,$7f 
020e a4           365         and h 
020f f6 80        366         or $80 ; always set top bit so we look at $8000 + 
0211 67           367         ld h,a
0212 e5           368         push hl 
0213 21 00 00     369         ld hl,$0000 
0216 22 d8 01     370         ld (ZadrWork),hl 
0219 22 da 01     371         ld (ZadrWork+2),hl 
021c e1           372         pop hl 
021d              373         ; [HL] now contains memory pointer!
021d c9           374         ret
021e              375 ;;;;
021e              376 
021e 00 00 00 00 00 00 00 00 00  377 bankwork: defb 0,0,0,0,0,0,0,0,0
0227              378 
0227              379 BANKSWAP:
0227              380 ;;;;;;;;;;;;;
0227              381 ; * A (preserve bc/hl)
0227              382 ; RomBank has the # of the 32kb block to write to 6000.
0227              383 ; (Currently does not support > 8mb)
0227              384 ; Must write bank bits from 0-8 in ascending order in BYTE size
0227              385 ;  e.g. 00000000 or 00000001 x 9
0227 c5           386         push bc                         
0228 e5           387         push hl 
0229              388 ;; - convert RomBank to binary 
0229 21 1e 02     389         ld hl,bankwork    ; &bankwork
022c 0e 01        390         ld c,1
022e              391 _bankworkloop
022e 3a 06 01     392         ld a,(RomBank)  
0231 a1           393         and c           ; bank & 001 ... bank & 010 ... 
0232 77           394         ld (hl),a 
0233 23           395         inc hl          ; bankwork++
0234 cb 21        396         sla c           ; c << 1
0236 30 f6        397         jr nc,_bankworkloop
0238              398 ;; - write one byte at a time to bank register
0238 21 1e 02     399         ld hl,bankwork  ; &bankwork
023b 01 09 00     400         ld bc,9         ; for i < 9...
023e              401 _b0r
023e 7e           402         ld a,(hl)
023f 32 00 60     403         ld ($6000),a    ; bank register
0242 23           404         inc hl 
0243 0b           405         dec bc 
0244 79           406         ld a,c 
0245 b0           407         or b 
0246 20 f6        408         jr nz,_b0r
0248              409         ; reset/return
0248 e1           410         pop hl 
0249 c1           411         pop bc 
024a c9           412         ret
024b              413 
024b              414 
024b              415 ;;;;                                    ; ~300?
024b              416 
024b              417 BANKUP:
024b              418 ;;;;;;;;;;;;;;
024b              419 ; * A H L
024b              420 ; Pops up the rom bank by 1 and 
024b              421 ; sets HL back to $8000
024b 3a 06 01     422         ld a,(RomBank)          ; +13
024e 3c           423         inc a                   ; +4   
024f 32 06 01     424         ld (RomBank),a          ; +13
0252 cd 27 02     425         call BANKSWAP           ; +17 +(BANKSWAP)
0255 21 00 80     426         ld hl,$8000             ; +10
0258 c9           427         ret                     ; +10
0259              428 ;;;;                            ; Total : 67+~300
0259              429 
0259              430 GETROMADDRESS: 
0259              431 ;;;;;;;;;;;;;;
0259              432 ; INPUT: ZadrWork+0 BANK
0259              433 ;        ZadrWork+2~ZadrWork+3 HL
0259              434 ; (bank * 8000) + HL & 7fff
0259              435 ; OUTPUT: ZadrWork ~ ZadrWork+3 CONTAINS LONGWORD ADDRESS
0259              436 ; * A
0259              437 ; Preserves HL
0259 e5           438         push hl
025a c5           439         push bc  
025b af           440          xor a ; clc 
025c 3a d8 01     441          ld a,(ZadrWork) ; contains RomBank, A15-A22
025f              442          ; 15:
025f e6 01        443          and $1 
0261 cb 1f        444          rr a   ; 15 > carry 
0263 cb 1f        445          rr a   ; carry > 7, carry = 0
0265 47           446          ld b,a ; contains bit 15 ; SAVE
0266 3a d8 01     447          ld a,(ZadrWork) ; 15-22...
0269 e6 fe        448          and $fe
026b cb 3f        449          srl a    ; and the last bit and shift RIGHT, so we have 16-23 (minus23)
026d 2a da 01     450          ld hl,(ZadrWork+2) 
0270 32 da 01     451          ld (ZadrWork+2),a ; put it in the 3rd byte 
0273 af           452          xor a 
0274 32 d8 01     453          ld (ZadrWork),a 
0277 32 d9 01     454          ld (ZadrWork+1),a ; zero the first two
027a              455          
027a 3e 7f        456          ld a,$7f 
027c a4           457          and h ; hl = bits 0-14, dont forget 15 in b!
027d b0           458          or b           ; d(>.< )
027e 67           459          ld h,a
027f 22 d8 01     460          ld (ZadrWork),hl 
0282 af           461          xor a 
0283 32 db 01     462          ld (ZadrWork+3),a ; 24-31 are always 0
0286 c1           463         pop bc 
0287 e1           464         pop hl 
0288 c9           465         RET 
0289              466 
0289              467 
0289              468 
0289              469 WRITEFM1:
0289              470 ;;;;;;;;;;;;;;;;;;;
0289              471 ; HL - location of song byte
0289              472 ; * A  
0289 23           473         inc hl                  ; +6
028a 7c           474         ld a,h                  ; +4
028b e6 80        475         and $80                 ; +7
028d cc 4b 02     476         call z,BANKUP ; this also sets HL to 8000 +17/10
0290 3a 00 40     477         LD A,($4000) 
0293 87           478         ADD A, A 
0294 38 fc        479         JR C,-4
0296 7e           480         LD A,(HL) 
0297 32 00 40     481         LD (FMREG0),A
029a 23           482         inc hl                  ; +6
029b 7c           483         ld a,h                  ; +4
029c e6 80        484         and $80                 ; +7
029e cc 4b 02     485         call z,BANKUP ; this also sets HL to 8000 +17/10
02a1 3a 00 40     486         LD A,($4000) 
02a4 87           487         ADD A, A 
02a5 38 fc        488         JR C,-4
02a7 7e           489         LD A,(HL) 
02a8 32 01 40     490         LD (FMDAT0),A 
02ab c3 47 01     491         JP PLAYLOOP
02ae              492 ;;;;
02ae              493 
02ae              494 ZWAIT:
02ae              495 ;;;;;;;;;;;;;;;;;;
02ae              496 ; * A C
02ae 3a 00 40     497         LD A,($4000) 
02b1 87           498         ADD A, A 
02b2 38 fc        499         JR C,-4
02b4 c9           500         RET 
02b5              501 ;;;;
02b5              502 
02b5              503 
02b5              504 
02b5              505 
02b5              506 WRITEFM2:
02b5              507 ;;;;;;;;;;;;;;;;
02b5              508 ; HL = song byte
02b5              509 ; * A
02b5 23           510         inc hl                  ; +6
02b6 7c           511         ld a,h                  ; +4
02b7 e6 80        512         and $80                 ; +7
02b9 cc 4b 02     513         call z,BANKUP ; this also sets HL to 8000 +17/10
02bc 3a 00 40     514         LD A,($4000) 
02bf 87           515         ADD A, A 
02c0 38 fc        516         JR C,-4
02c2 7e           517         LD A,(HL) 
02c3 32 02 40     518         LD (FMREG1),A 
02c6 23           519         inc hl                  ; +6
02c7 7c           520         ld a,h                  ; +4
02c8 e6 80        521         and $80                 ; +7
02ca cc 4b 02     522         call z,BANKUP ; this also sets HL to 8000 +17/10
02cd 3a 00 40     523         LD A,($4000) 
02d0 87           524         ADD A, A 
02d1 38 fc        525         JR C,-4
02d3 7e           526         LD A,(HL) 
02d4 32 03 40     527         LD (FMDAT1),A 
02d7 c3 47 01     528         JP PLAYLOOP 
02da              529 ;;;;
02da              530 
02da              531 WRITEPSG:
02da              532 ;;;;;;;;;;;;;;;;
02da              533 ; HL = song byte 
02da              534 ; * A
02da 23           535         inc hl                  ; +6
02db 7c           536         ld a,h                  ; +4
02dc e6 80        537         and $80                 ; +7
02de cc 4b 02     538         call z,BANKUP ; this also sets HL to 8000 +17/10
02e1              539         ;CALL ZWAIT 
02e1 7e           540         LD A,(HL) 
02e2 32 11 7f     541         ld (PSGREG),a 
02e5 c3 47 01     542         JP PLAYLOOP 
02e8              543 ;;;;
02e8              544 
02e8              545 
02e8              546 
02e8              547 SAMPLEWAIT:
02e8              548 ;;;;;;;;;;;
02e8              549 ; * A, B, C
02e8              550 ; HL = song byte
02e8 23           551         inc hl                  ; +6
02e9 7c           552         ld a,h                  ; +4
02ea e6 80        553         and $80                 ; +7
02ec cc 4b 02     554         call z,BANKUP ; this also sets HL to 8000 +17/10
02ef 7e           555         ld a,(hl)
02f0 4f           556         ld c,a 
02f1 23           557         inc hl                  ; +6
02f2 7c           558         ld a,h                  ; +4
02f3 e6 80        559         and $80                 ; +7
02f5 cc 4b 02     560         call z,BANKUP ; this also sets HL to 8000 +17/10
02f8 7e           561         ld a,(hl)
02f9 47           562         ld b,a 
02fa 04           563         inc b ; FIXME: This is to fix the "too fast" sample wait
02fb ed 43 0c 01  564         ld (SAMPTOWAIT),bc 
02ff c3 47 01     565         JP PLAYLOOP 
0302              566 
0302              567 
0302              568 
0302              569 CLEARPSG:
0302              570 ;;;;;;;;;;;;;;;;;;;;
0302              571 ; clear the SSG (mute)
0302              572 ; * A, B (preserve HL)
0302 e5           573         push hl 
0303 21 20 00     574         LD HL,CLRTB 
0306 06 04        575         ld b,4
0308              576 _clearlp:
0308 7e           577         ld a,(hl) 
0309 32 11 7f     578         ld (PSGREG),a 
030c 23           579         inc hl                  ; +6
030d 7c           580         ld a,h                  ; +4
030e e6 80        581         and $80                 ; +7
0310 cc 4b 02     582         call z,BANKUP ; this also sets HL to 8000 +17/10
0313 10 f3        583         djnz _clearlp
0315 e1           584         pop hl 
0316 c9           585         RET
0317              586 ;;;;
0317              587 
0317              588 KHZRATE8: equ 134
0317              589 
0317              590 ;; DAC STUFF:
0317              591 
0317 00 00        592 DacWRAM: defb 0, 0
0319              593 DACWORK
0319 00 00 00 00  594         defb 0,0,0,0
031d              595 
031d              596 DACBLOCKTRANSFER:
031d              597         ; DEBUG ret 
031d              598 ;        ret
031d af           599         xor a 
031e e5           600         push hl 
031f 2a 10 01     601          ld hl,(Sample1Address)
0322 ed 5b 12 01  602          ld de,(Sample1Address+2)
0326 19           603          add hl,de 
0327 b4           604          or h 
0328 b5           605          or l 
0329 28 02        606          jr z,_nosample 
032b              607          ; ok, sample found
032b 18 02        608          jr _playsample
032d              609 _nosample:
032d e1           610         pop hl 
032e c9           611         ret 
032f              612 
032f              613 _playsample:
032f              614         ; PRESERVE CURRENT ROM BANK AND SONG PTR IN WORKRAM~+3
032f 3a 06 01     615          ld a,(RomBank) 
0332 32 19 03     616          ld (DACWORK),a 
0335 af           617          xor a
0336 32 1a 03     618          ld (DACWORK+1),a     ; saving me for later!
0339 e1           619         pop hl 
033a 22 1b 03     620         ld (DACWORK+2),hl    ; save hl ofc 
033d              621         
033d              622         ; change zadr to sample location
033d 2a 10 01     623         ld hl,(Sample1Address)
0340 22 d8 01     624         ld (ZadrWork),hl 
0343 2a 12 01     625         ld hl,(Sample1Address+2)
0346 22 da 01     626         ld (ZadrWork+2),hl 
0349 cd dc 01     627         call SETZADDRESS
034c              628         
034c              629         ; hl has address of sample, FIXME 184 samples/frame = ntsc/11khz
034c 01 86 00     630         ld bc,KHZRATE8 ; 8kb sample in 1 second
034f              631         ; loop ....
034f              632         ; dac on 
034f 3e 2b        633         ld a,$2b 
0351 32 00 40     634         ld ($4000),a
0354 3e 80        635         ld a,$80
0356 32 01 40     636         ld ($4001),a
0359              637 _dacwriteloop:
0359              638         
0359 3e 2a        639         ld a,$2a 
035b 32 00 40     640         ld ($4000),a 
035e 7e           641         ld a,(hl)
035f 32 01 40     642         ld ($4001),a 
0362 23           643         inc hl                  ; +6
0363 7c           644         ld a,h                  ; +4
0364 e6 80        645         and $80                 ; +7
0366 cc 4b 02     646         call z,BANKUP ; this also sets HL to 8000 +17/10
0369 0b           647         dec bc 
036a 78           648         ld a,b 
036b b1           649         or c 
036c 20 eb        650         jr nz,_dacwriteloop
036e              651         ; dac off 
036e 3e 2b        652         ld a,$2b 
0370 32 00 40     653         ld ($4000),a
0373 af           654         xor a
0374 32 01 40     655         ld ($4001),a 
0377              656         
0377              657         ; add32 
0377 af           658         xor a   ; clc
0378 2a 10 01     659         ld hl,(Sample1Address)
037b 01 86 00     660         ld bc,KHZRATE8
037e ed 4a        661         adc hl,bc 
0380 22 10 01     662         ld (Sample1Address),hl 
0383 30 07        663         jr nc,_noincad
0385 2a 12 01     664         ld hl, (Sample1Address+2)
0388 23           665         inc hl 
0389 22 12 01     666         ld (Sample1Address+2),hl 
038c              667         ; cmp32: Sample1Address vs Sample1Length 
038c              668 _noincad
038c 2a 16 01     669         ld hl,(Sample1Length+2)
038f ed 4b 12 01  670         ld bc,(Sample1Address+2)
0393 ed 42        671         sbc hl,bc ; is adr > len?
0395 30 02        672         jr nc, _con ; if not, continue
0397 38 19        673         jr c,_dacover
0399              674 _con:   ; compare lower 16 bits with address + playrate
0399 2a 10 01     675         ld hl,(Sample1Address)
039c 01 86 00     676         ld bc,KHZRATE8
039f 09           677         add hl,bc
03a0              678         ; we wont catch carry here because weve already checked the top 16 bits.
03a0 ed 4b 14 01  679         ld bc,(Sample1Length) ; TODO technically if it overflows it will stop.
03a4 ed 42        680         sbc hl,bc  ; is adr > len?
03a6 30 0a        681         jr nc, _dacover ; if address is still < length, continue
03a8              682 
03a8              683 TEST:
03a8              684 _condac
03a8 3a 19 03     685         ld a,(DACWORK)
03ab cd 27 02     686         call BANKSWAP
03ae 2a 1b 03     687         ld hl,(DACWORK+2)
03b1 c9           688         ret
03b2              689 _dacover:
03b2 21 00 00     690         ld hl,0
03b5 22 10 01     691         ld (Sample1Address),hl 
03b8 22 12 01     692         ld (Sample1Address+2),hl
03bb 18 eb        693         jr _condac
03bd              694 ;;;;
03bd              695 
03bd              696 QUICKSTOP:
03bd              697 
03bd c9           698         RET 
03be              699 
03be              700 STOPDAC:
03be              701 ;;;;;;;;;;;;;;
03be              702 ; Stops DAC and disables DAC mode on CH6
03be              703 ; FIXME broken ?
03be 23           704         inc hl                  ; +6
03bf 7c           705         ld a,h                  ; +4
03c0 e6 80        706         and $80                 ; +7
03c2 cc 4b 02     707         call z,BANKUP ; this also sets HL to 8000 +17/10
03c5              708   
03c5 c3 47 01     709         jp PLAYLOOP  
03c8              710 ;;;
03c8              711 
03c8 00           712 StreamID: defb 0
03c9              713 ; 90 0 2 0 2a 
03c9              714 ; TODO SUPPORT MORE THAN ONE DAC STREAM :)
03c9              715 DACSETUP:
03c9              716         ;INC HL  ; STREAM ID 
03c9 23           717         inc hl                  ; +6
03ca 7c           718         ld a,h                  ; +4
03cb e6 80        719         and $80                 ; +7
03cd cc 4b 02     720         call z,BANKUP ; this also sets HL to 8000 +17/10
03d0              721      
03d0 23           722         inc hl                  ; +6
03d1 7c           723         ld a,h                  ; +4
03d2 e6 80        724         and $80                 ; +7
03d4 cc 4b 02     725         call z,BANKUP ; this also sets HL to 8000 +17/10
03d7 23           726         inc hl                  ; +6
03d8 7c           727         ld a,h                  ; +4
03d9 e6 80        728         and $80                 ; +7
03db cc 4b 02     729         call z,BANKUP ; this also sets HL to 8000 +17/10
03de              730         ; write this byte 
03de 23           731         inc hl                  ; +6
03df 7c           732         ld a,h                  ; +4
03e0 e6 80        733         and $80                 ; +7
03e2 cc 4b 02     734         call z,BANKUP ; this also sets HL to 8000 +17/10
03e5              735         ; to this reg
03e5              736         
03e5 c3 47 01     737         jp PLAYLOOP 
03e8              738 
03e8              739 SETDACSTREAM:        
03e8              740 ; 0X91 <STREAM> <DATABANK ID> <STEP SIZE> <STEP BASE>
03e8              741 ;         0           0            1           0 
03e8              742 ; Preserves BC 
03e8 c5           743        push bc 
03e9 23           744         inc hl                  ; +6
03ea 7c           745         ld a,h                  ; +4
03eb e6 80        746         and $80                 ; +7
03ed cc 4b 02     747         call z,BANKUP ; this also sets HL to 8000 +17/10
03f0 23           748         inc hl                  ; +6
03f1 7c           749         ld a,h                  ; +4
03f2 e6 80        750         and $80                 ; +7
03f4 cc 4b 02     751         call z,BANKUP ; this also sets HL to 8000 +17/10
03f7 23           752         inc hl                  ; +6
03f8 7c           753         ld a,h                  ; +4
03f9 e6 80        754         and $80                 ; +7
03fb cc 4b 02     755         call z,BANKUP ; this also sets HL to 8000 +17/10
03fe 23           756         inc hl                  ; +6
03ff 7c           757         ld a,h                  ; +4
0400 e6 80        758         and $80                 ; +7
0402 cc 4b 02     759         call z,BANKUP ; this also sets HL to 8000 +17/10
0405 c1           760        pop bc 
0406              761 
0406 c3 47 01     762         jp PLAYLOOP  
0409              763 
0409              764 _invfreq
0409 88           765         defb $88
040a c3 0a 04     766 INVALIDFREQ: JP INVALIDFREQ 
040d              767 
040d              768 DacTransferActive: 
040d 00           769         defb 0
040e              770 DacFrequency:
040e 00 00        771         defb 0, 0
0410              772 RealFrequency: 
0410 00 00 00 00  773         defb 0,0,0,0
0414              774 
0414              775 ; 
0414              776 FreqTable:
0414 86 00 b8 00 0b 01 70 01 15 02  777         DEFW 134,184,267,368,533
041e              778 PALFreqTable:
041e a0 00 dd 00 40 01 b9 01 80 02  779         DEFW 160,221,320,441,640
0428              780 
0428              781 ; $92
0428              782 SETDACFREQ: ; 7D00 == 32000
0428              783 ; 7D00 = 32000 = 533 N 640P ; 
0428              784 ; 5622 = 22050 = 368 N 441P ; 
0428              785 ; 3E80 = 16000 = 267 N 320P ; 
0428              786 ; 2b11 = 11025 = 184 N 221P
0428              787 ; 1f40 = 8000 =  134 N 160P
0428 23           788         inc hl                  ; +6
0429 7c           789         ld a,h                  ; +4
042a e6 80        790         and $80                 ; +7
042c cc 4b 02     791         call z,BANKUP ; this also sets HL to 8000 +17/10
042f 23           792         inc hl                  ; +6
0430 7c           793         ld a,h                  ; +4
0431 e6 80        794         and $80                 ; +7
0433 cc 4b 02     795         call z,BANKUP ; this also sets HL to 8000 +17/10
0436 23           796         inc hl                  ; +6
0437 7c           797         ld a,h                  ; +4
0438 e6 80        798         and $80                 ; +7
043a cc 4b 02     799         call z,BANKUP ; this also sets HL to 8000 +17/10
043d 23           800         inc hl                  ; +6
043e 7c           801         ld a,h                  ; +4
043f e6 80        802         and $80                 ; +7
0441 cc 4b 02     803         call z,BANKUP ; this also sets HL to 8000 +17/10
0444 23           804         inc hl                  ; +6
0445 7c           805         ld a,h                  ; +4
0446 e6 80        806         and $80                 ; +7
0448 cc 4b 02     807         call z,BANKUP ; this also sets HL to 8000 +17/10
044b c3 47 01     808     jp PLAYLOOP 
044e              809 
044e              810 
044e              811 ;;;;;;;;;;;;;;;;;
044e              812 STARTDACSTREAM:
044e              813 ;        inc hl  ; stream id 
044e              814         ; TODO NOT USED IN MY EXAMPLES
044e 18 fe        815         JR STARTDACSTREAM
0450              816 
0450              817 GETBLOCKSTRUCT:
0450              818 ;;;;;;;;;;;;;;;;;;
0450              819 ; IN: [A]
0450              820 ; OUT: HL
0450              821 ; PRESERVES BC 
0450              822 ; * A H L 
0450 c9           823         RET 
0451              824 
0451              825 ; 95 00 (0-15) 00
0451 00           826 ActiveDacBlock: defb 0  ; which block 0-15 stored below
0452 00 00 00 00  827 ActiveDacCtr: defb 0,0,0,0 ; 32bit count
0456 00 00        828 ActiveDacLoc: defb 0,0  ; what is the memory offset
0458 00           829 ActiveDacBank: defb 0   ; which 68000 memory bank
0459 00           830 LoopDac: defb 0
045a              831 
045a              832 DACFASTCALL:
045a              833 ;;;;;;;;;;;;;;;;;;;;;;;;
045a              834 ; This should start the DAC playback
045a              835 ; 95 00 ID 00
045a              836 ; for data block info:
045a              837 ; data type 1
045a              838 ; datasize 4
045a              839 ; dataloc 2  (hl) 
045a              840 ; databank 1 (rom)
045a              841 ; datacounter 4 (bytes left this loop)
045a              842 ; blockactive 1 (gogogo)
045a              843 ; 0X95
045a 23           844         inc hl                  ; +6
045b 7c           845         ld a,h                  ; +4
045c e6 80        846         and $80                 ; +7
045e cc 4b 02     847         call z,BANKUP ; this also sets HL to 8000 +17/10
0461 23           848         inc hl                  ; +6
0462 7c           849         ld a,h                  ; +4
0463 e6 80        850         and $80                 ; +7
0465 cc 4b 02     851         call z,BANKUP ; this also sets HL to 8000 +17/10
0468 23           852         inc hl                  ; +6
0469 7c           853         ld a,h                  ; +4
046a e6 80        854         and $80                 ; +7
046c cc 4b 02     855         call z,BANKUP ; this also sets HL to 8000 +17/10
046f 23           856         inc hl                  ; +6
0470 7c           857         ld a,h                  ; +4
0471 e6 80        858         and $80                 ; +7
0473 cc 4b 02     859         call z,BANKUP ; this also sets HL to 8000 +17/10
0476 c3 47 01     860         jp PLAYLOOP 
0479              861 
0479              862 
0479              863 ;; 
0479              864 
0479              865 ; Everything below is legacy to handle VGM files with embedded DATs.
0479              866 
0479              867 
0479              868 ;;
0479              869 
0479              870 ; Data Block struct:
0479 ff           871 DataType: defb $ff
047a 00 00 00 00  872 DataSize: defb 0,0,0,0
047e 00 00        873 DataLoc: defb 0,0
0480 00           874 DataBank: defb 0
0481 00 00 00 00  875 DataCounter: defb 0,0,0,0 
0485 00           876 BlockActive: defb 0
0486 00 00 00     877 _buffer: defb 0,0,0          ; 16 bytes 
0489              878 ;Type (ff means empty) 1
0489              879 ; Compatible types:
0489              880 ; 0: YM2612 PCM data 
0489              881 ;Size 4
0489              882 ; 32 bit size (from VGM file)
0489              883 ;Loc 2 (HL offset of data start)
0489              884 ;Bank 1 (bank of data start)
0489              885 ;Counter 4 (32bit offset remaining to play of this loop)
0489              886 ;BlockActive: 1 if we need to dac stream it, 0 skips
0489              887 ;_buffer 3 : to align to 16 bytes
0489 ff 00 00 00 00 00 00 00  888 Block1: defb $ff,0,0,0,0,0,0,0
0491 00 00 00 00 00 00 00 00  889         defb $0,0,0,0,0,0,0,0
0499 ff 00 00 00 00 00 00 00  890 Block2: defb $ff,0,0,0,0,0,0,0
04a1 00 00 00 00 00 00 00 00  891         defb $0,0,0,0,0,0,0,0
04a9 ff 00 00 00 00 00 00 00  892 Block3: defb $ff,0,0,0,0,0,0,0
04b1 00 00 00 00 00 00 00 00  893         defb $0,0,0,0,0,0,0,0
04b9 ff 00 00 00 00 00 00 00  894 Block4: defb $ff,0,0,0,0,0,0,0
04c1 00 00 00 00 00 00 00 00  895         defb $0,0,0,0,0,0,0,0
04c9 ff 00 00 00 00 00 00 00  896 Block5: defb $ff,0,0,0,0,0,0,0
04d1 00 00 00 00 00 00 00 00  897         defb $0,0,0,0,0,0,0,0
04d9 ff 00 00 00 00 00 00 00  898 Block6: defb $ff,0,0,0,0,0,0,0
04e1 00 00 00 00 00 00 00 00  899         defb $0,0,0,0,0,0,0,0
04e9 ff 00 00 00 00 00 00 00  900 Block7: defb $ff,0,0,0,0,0,0,0
04f1 00 00 00 00 00 00 00 00  901         defb $0,0,0,0,0,0,0,0
04f9 ff 00 00 00 00 00 00 00  902 Block8: defb $ff,0,0,0,0,0,0,0
0501 00 00 00 00 00 00 00 00  903         defb $0,0,0,0,0,0,0,0
0509 ff 00 00 00 00 00 00 00  904 Block9: defb $ff,0,0,0,0,0,0,0
0511 00 00 00 00 00 00 00 00  905         defb $0,0,0,0,0,0,0,0
0519 ff 00 00 00 00 00 00 00  906 Block10: defb $ff,0,0,0,0,0,0,0
0521 00 00 00 00 00 00 00 00  907         defb $0,0,0,0,0,0,0,0
0529 ff 00 00 00 00 00 00 00  908 Block11: defb $ff,0,0,0,0,0,0,0
0531 00 00 00 00 00 00 00 00  909         defb $0,0,0,0,0,0,0,0
0539 ff 00 00 00 00 00 00 00  910 Block12: defb $ff,0,0,0,0,0,0,0
0541 00 00 00 00 00 00 00 00  911         defb $0,0,0,0,0,0,0,0
0549 ff 00 00 00 00 00 00 00  912 Block13: defb $ff,0,0,0,0,0,0,0
0551 00 00 00 00 00 00 00 00  913         defb $0,0,0,0,0,0,0,0
0559 ff 00 00 00 00 00 00 00  914 Block14: defb $ff,0,0,0,0,0,0,0
0561 00 00 00 00 00 00 00 00  915         defb $0,0,0,0,0,0,0,0
0569 ff 00 00 00 00 00 00 00  916 Block15: defb $ff,0,0,0,0,0,0,0
0571 00 00 00 00 00 00 00 00  917         defb $0,0,0,0,0,0,0,0
0579              918 
0579 00 00        919 DBWORK: defb 0,0
057b              920 
057b              921 DATABLOCK:
057b              922 ;;;;;;;;;;;;
057b              923 ;
057b d5           924       push de 
057c 23           925         inc hl                  ; +6
057d 7c           926         ld a,h                  ; +4
057e e6 80        927         and $80                 ; +7
0580 cc 4b 02     928         call z,BANKUP ; this also sets HL to 8000 +17/10
0583 7e           929         ld a,(hl) 
0584              930         ; find an empty block of pointers
0584 e5           931         push hl ;9f43 = 66
0585 21 69 04     932          ld hl,DataType-16
0588 01 10 00     933          ld bc,16      ; 16 BYTES IN SIZE 
058b              934 _blockfind:
058b af           935          xor a 
058c ed 4a        936          adc hl,bc 
058e 7e           937          ld a,(hl)    ; hl += 16
058f fe ff        938          cp $ff 
0591 28 02        939          jr z,_blockok 
0593 18 f6        940          jr _blockfind 
0595              941 _blockok:         
0595 e5           942          push hl 
0596 c1           943          pop bc ; now BC has block struct pointer. 
0597 ed 43 79 05  944          LD (DBWORK),BC 
059b e1           945         pop hl                  
059c              946 
059c 23           947         inc hl                  ; +6
059d 7c           948         ld a,h                  ; +4
059e e6 80        949         and $80                 ; +7
05a0 cc 4b 02     950         call z,BANKUP ; this also sets HL to 8000 +17/10
05a3 7e           951         ld a,(hl) 
05a4 02           952         ld (bc),a  ; data type  ; = 0
05a5 23           953         inc hl                  ; +6
05a6 7c           954         ld a,h                  ; +4
05a7 e6 80        955         and $80                 ; +7
05a9 cc 4b 02     956         call z,BANKUP ; this also sets HL to 8000 +17/10
05ac              957         ; TODO: Check data type
05ac              958         
05ac 03           959         inc bc 
05ad 7e           960         ld a,(hl)  ; 9f45 = 77
05ae 02           961         ld (bc),a ; data size
05af 32 29 00     962         ld (WORKRAM),a 
05b2 23           963         inc hl                  ; +6
05b3 7c           964         ld a,h                  ; +4
05b4 e6 80        965         and $80                 ; +7
05b6 cc 4b 02     966         call z,BANKUP ; this also sets HL to 8000 +17/10
05b9              967         
05b9 7e           968         ld a,(hl)
05ba 03           969         inc bc  
05bb 02           970         ld (bc),a ; data size+1 = 0c
05bc 32 2a 00     971         ld (WORKRAM+1),a ; for later
05bf 23           972         inc hl                  ; +6
05c0 7c           973         ld a,h                  ; +4
05c1 e6 80        974         and $80                 ; +7
05c3 cc 4b 02     975         call z,BANKUP ; this also sets HL to 8000 +17/10
05c6              976         
05c6 03           977         inc bc 
05c7 7e           978         ld a,(hl) 
05c8 02           979         ld (bc),a ; data size+2 = 00
05c9 32 2b 00     980         ld (WORKRAM+2),a 
05cc 23           981         inc hl                  ; +6
05cd 7c           982         ld a,h                  ; +4
05ce e6 80        983         and $80                 ; +7
05d0 cc 4b 02     984         call z,BANKUP ; this also sets HL to 8000 +17/10
05d3              985         
05d3 03           986         inc bc 
05d4 7e           987         ld a,(hl) 
05d5 02           988         ld (bc),a ; data size+3 = 00
05d6 32 2c 00     989         ld (WORKRAM+3),a 
05d9              990         
05d9              991         ; now store HL, which is right before data start...
05d9 03           992         inc bc 
05da 7d           993         ld a,l   ; dataloc l...
05db 02           994         ld (bc),a 
05dc              995         
05dc 7c           996         ld a,h   ; and h
05dd 03           997         inc bc 
05de 02           998         ld (bc),a ;
05df              999         
05df 3a 06 01    1000         ld a,(RomBank) 
05e2 03          1001         inc bc     ; DataBank
05e3 02          1002         ld (bc),a ; and store current rom bank, cuz this must be where it starts
05e4 32 d8 01    1003         ld (ZadrWork),a 
05e7 af          1004         xor a 
05e8 32 d9 01    1005         ld (ZadrWork+1),a 
05eb 22 da 01    1006         ld (ZadrWork+2),hl ; 0, 0, 9a9f ( = 1a9f)
05ee             1007 ;Counter 4 (32bit offset remaining to play of this loop)
05ee 2a 29 00    1008         ld hl,(WORKRAM) 
05f1 7d          1009         ld a,l 
05f2 03          1010         inc bc     ; ctr+0
05f3 02          1011         ld (bc),a 
05f4 7c          1012         ld a,h 
05f5 03          1013         inc bc 
05f6 02          1014         ld (bc),a  ; ctr+1 
05f7 2a 2b 00    1015         ld hl,(WORKRAM+2) 
05fa 7d          1016         ld a,l 
05fb 03          1017         inc bc   ; ctr+2
05fc 02          1018         ld (bc),a 
05fd 7c          1019         ld a,h 
05fe 03          1020         inc bc 
05ff 02          1021         ld (bc),a  ; ctr+3 
0600             1022         ; BlockActive starts at 0, we set it to 1 when we hit FASTCALL. 
0600             1023         ; so ignore the rest.
0600             1024 
0600             1025         ; NEW FUNCTION: Get 68000 address from current bank/HL
0600 cd 59 02    1026         call GETROMADDRESS
0603             1027         ; ZadrWork = 32bit address of data bank start 
0603             1028         ; WORKRAM = data size 
0603             1029         ; add WORKRAM to ZadrWork
0603 2a d8 01    1030         ld hl,(ZadrWork) ; 
0606 ed 4b 29 00 1031         ld bc,(WORKRAM)  ; data size low 16 
060a b7          1032         or a 
060b ed 4a       1033         adc hl,bc ; check carry 
060d 22 d8 01    1034         ld (ZadrWork),hl ; save low 16
0610 2a da 01    1035         ld hl,(ZadrWork+2) 
0613 01 00 00    1036         ld bc,$0000
0616 ed 4a       1037         adc hl,bc  ; ok  ; carry is cleared here)
0618 ed 4b 2b 00 1038         ld bc,(WORKRAM+2) 
061c ed 4a       1039         adc hl,bc  ; upper 16
061e 22 da 01    1040         ld (ZadrWork+2),hl 
0621 cd dc 01    1041         call SETZADDRESS  ; s
0624             1042         ; now our song pointer and rom window should be
0624             1043         ; at the byte following the data block -1.
0624 d1          1044      pop de 
0625             1045 _compressed: ; TODO do extra stuff for compressed data
0625             1046 _uncompressed:
0625 c3 47 01    1047         jp PLAYLOOP     
0628             1048 
0628             1049 _emptyblock
0628 3e ff       1050         LD A,$FF 
062a e5          1051         PUSH HL 
062b 2a 79 05    1052         LD HL,(DBWORK) 
062e 77          1053         LD (HL),A 
062f e1          1054         POP HL 
0630 d1          1055         POP DE 
0631 c3 47 01    1056         JP PLAYLOOP 
0634             1057 
1525 bytes code generated and 144 labels defined
