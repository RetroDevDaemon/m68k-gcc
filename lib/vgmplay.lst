0000                1 ;;;;;;;;;;;;;;;;;
0000                2 ;;
0000                3 ;; Z80 VGM Player
0000                4 ;; 
0000                5 ;; v 0.25
0000                6 ; WARNING: 68k side addresses changed from a00080+ to a00100+
0000                7 ; Set to NTSC 
0000                8 ; Samples currently OFF while debugging
0000                9 ; Watch for macros
0000               10 
0000               11 ; by RetroDevDiscord
0000               12 
0000               13 ; Special thanks to: 
0000               14 ;  Stef 
0000               15 ;  vytah
0000               16 
0000               17 ;;; TO USE: 
0000               18 ; Set byte a00100 to 1 every vblank to play!
0000               19 ; read byte a00101 to see if song is playing or not.
0000               20 ; Set SongBaseAddress (102h-105h) to full 32bit address 
0000               21 ; and RomBank (106h) to bit 15+ of the 68000 memory bank
0000               22 ; If PAL, set the PAL flag to 1 (108h), otherwise, 0=NTSC
0000               23 
0000               24 ; TODOS:
0000               25 ; - Tie z80 to vblank interrupt so it isn't driven by 68000
0000               26 ; - Add error checking for vgm 1.60
0000               27 ; - weirder bytecodes 
0000               28 ; - multiple sample streams 
0000               29 ; - WIP: multiple data blocks
0000               30 
0000               31 ;;;;;
0000               32 ; FIXMEs
0000               33 ; - copy and paste CurDac stuff within dac loop 
0000               34 ; - dac block transfer size needs adjusting / delay based on sample width!
0000               35 
0000               36 
0000               37 FMREG0 EQU $4000
0000               38 FMDAT0 EQU $4001
0000               39 FMREG1 EQU $4002
0000               40 FMDAT1 EQU $4003
0000               41 BANKREG EQU $6000
0000               42 PSGREG EQU $7F11
0000               43 
0000               44 
0000               45 VGM_START EQU $00 
0000               46 VGM_END EQU $04       ;*: ; 2004-2005
0000               47 SSGCLOCK EQU $0C      ; : ; 200c-200f
0000               48 SAMPLECOUNT EQU $18   ;*:  ; 2018-201b 0X22740
0000               49 LOOPOFFSET EQU $1c    ;*: 201c-201f
0000               50 LOOPNUMS EQU $20      ;*:   ; 2020-2023
0000               51 RATE EQU $24          ;:   ; 2024-2027 = 60
0000               52 SNFB EQU $28          ;*?:  ; 2028-9 = 0009
0000               53 SNW EQU $2a           ;*?; 202a = 16
0000               54 SF EQU $2b            ;*:    ; 202b ; ssg flags all 0
0000               55 YM2612CLK EQU $2C     ;: ; 202c-202f = 0x750ab6 
0000               56 VGMDATOFS EQU $34     ;*:  ; 2034-2037
0000               57 ;SPCMCLK EQU $2038       ;:    ; 2038-203b
0000               58 ;SPCMI EQU $203C         ;:   ; 203c-203f
0000               59 VM EQU $7C            ;: volume modifier (default 0) ; 207c
0000               60 LB EQU $7E            ;: loop base; 207e
0000               61 LM EQU $7F            ;: loop modifier; 207f
0000               62         
0000               63         org $0
0000               64 
0000               65 ; disable interrupts
0000 f3            66         di 
0001               67 
0001               68 ; clear the stack
0001 3e 00         69         ld a, 0
0003 11 00 1c      70         ld de, $1c00 
0006 06 00         71         ld b, 0 
0008               72 _clrstack:
0008 12            73         LD (DE),A
0009 13            74         inc de 
000a 10 fc         75         djnz _clrstack
000c               76 _clr2
000c 12            77         ld (de),a 
000d 13            78         inc de 
000e 10 fc         79         djnz _clr2
0010               80 _clr3 
0010 12            81         ld (de),a 
0011 13            82         inc de 
0012 10 fc         83         djnz _clr3
0014               84 
0014               85 ; set the stack pointer 
0014 31 80 1d      86         ld sp,$1d80 
0017               87 
0017               88 ; clear and go!
0017 cd db 02      89         call CLEARPSG 
001a cd 00 02      90         call BANKSWAP
001d               91 
001d c3 1c 01      92         jp LOADVGM 
0020               93         
0020               94 ; +8 and +9 should contain VGM version number.
0020               95 ;VERSIONCHECK:
0020               96 ;        ld hl, ($2008) 
0020               97 ;        cp h, $60
0020               98 ;        jr nz,WRONGVER
0020               99 ;        cp l, $01
0020              100 ;        jr nz,WRONGVER 
0020              101 ;        jp LOADVGM
0020              102 ;WRONGVER:
0020              103 ;        jp WRONGVER
0020              104 
0020              105 CLRTB:
0020 9f bf df ff  106         defb $9f,$bf,$df,$ff
0024              107 LoopPlay: 
0024 00           108         defb 0
0025              109 LoopLoc:        
0025 00 00 00 00  110         defb 0,0,0,0
0029              111 
0029 00 00 00 00  112 WORKRAM: defb 0,0,0,0
002d              113 
002d 00 00 00 00  114 SongDataStart: defb 0,0,0,0
0031              115 
0031              116 
0031              117 ; sub 50h then times 2
0031              118 CMDJUMPTABLE: ; starts at 50h
0031 b3 02 00 00 62 02 8e 02 00 00 00 00 00 00 00 00  119         defw WRITEPSG, 0, WRITEFM1, WRITEFM2, 0, 0, 0, 0 ; 50-57
0041 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  120         DEFW 0, 0, 0, 0, 0, 0, 0, 0 ;   58-5F
0051 00 00 c1 02 84 01 84 01 00 00 00 00 9f 01 9d 05  121         defw 0, SAMPLEWAIT, FRAMEOVER, FRAMEOVER, 0, 0, SONGOVER, DATABLOCK ; 60-67
0061 a6 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  122         DEFW WRITEPCM, 0, 0, 0, 0, 0, 0, 0
0071 aa 01 aa 01 aa 01 aa 01 aa 01 aa 01 aa 01 aa 01  123         DEFW QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT ;70
0081 aa 01 aa 01 aa 01 aa 01 aa 01 aa 01 aa 01 aa 01  124         DEFW QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT ;7F   
0091 ae 01 ae 01 ae 01 ae 01 ae 01 ae 01 ae 01 ae 01  125         DEFW QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT
00a1 ae 01 ae 01 ae 01 ae 01 ae 01 ae 01 ae 01 ae 01  126         DEFW QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT ;..8f
00b1 a1 03 c0 03 fe 03 6f 04 96 03 7b 04  127         DEFW DACSETUP, SETDACSTREAM, SETDACFREQ, STARTDACSTREAM, STOPDAC, DACFASTCALL ; 90-95
00bd 9b 01 18 01  128         DEFW ERROR, FOREVERLOOP  ; 96, 97
00c1              129 
00c1              130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00c1              131 
00c1              132         org $100
0100              133 
0100              134 ; Vars
0100              135 PlayNext:
0100 00           136         defb 0          ; 100h
0101              137 SongPlaying: 
0101 00           138         defb 0          ; 101h
0102              139 SongBaseAddress:        ; Set me when loading the song from the 68000!
0102 00 00 00 00  140         defb $0, $0, 0, 0 ; 102-105h
0106              141 RomBank:
0106 00           142         defb 0          ; 106h
0107              143 StartBank:
0107 00           144         defb 0          ; --
0108              145 ; This is 0 if NTSC, and 1 if PAL.
0108 00           146 PALFlag: defb 0         ; 108h
0109              147 ; Set this to 1 and the next frame the Z80 will reset (jp 0). 
0109              148 ; Do this after changing SongBaseAddress to change songs. 
0109 00           149 ResetFlag: defb 0       ; 109h
010a              150 
010a              151 FREECYCLES: ; 10Ah
010a 00 00        152         defw 0 
010c              153 SAMPTOWAIT:
010c 00 00        154         defw 0
010e              155 LOCALEWAIT: 
010e 00 00        156         defw 0
0110              157 PALWAIT equ 882 
0110              158 NTSCWAIT equ 735
0110              159 
0110 00 00 00 00  160 Sample1Address: defw 0,0        
0114 00 00 00 00  161 Sample1Length:  defw 0,0         ; this is also the address of the next sample in block.
0118              162 
0118              163 FOREVERLOOP:
0118 2b           164         dec hl 
0119 c3 84 01     165         jp FRAMEOVER
011c              166 
011c              167 LOADVGM:
011c              168 ;;;;;;;;;;;;;;;;
011c 3a 08 01     169         ld a,(PALFlag)
011f fe 00        170         cp 0
0121 28 08        171         jr z,_ntw
0123 21 72 03     172         ld hl,PALWAIT
0126 22 0e 01     173         ld (LOCALEWAIT),hl 
0129 18 06        174         jr _ld 
012b              175 _ntw:
012b 21 df 02     176         ld hl,NTSCWAIT
012e 22 0e 01     177         ld (LOCALEWAIT),hl 
0131              178 _ld:
0131              179         ;LD A,1 
0131              180         ;LD (SongPlaying),A      ; set playing var to ON
0131 3a 06 01     181         LD A,(RomBank) 
0134 32 07 01     182         LD (StartBank),A        ; Store the initial ROM bank for looping.
0137              183         
0137              184 ; Set the memory window to the song header (+1c)      
0137              185         ;ld hl,(SongBaseAddress)
0137              186         ;ld bc,$001c 
0137              187         ;xor a 
0137              188         ;adc hl,bc 
0137              189         ;ld (ZadrWork),hl 
0137              190         ;ld hl,(SongBaseAddress+2)
0137              191         ;ld bc,$0000
0137              192         ;adc hl,bc               ; catch the carry
0137              193         ;ld (ZadrWork+2),hl
0137              194         ;call SETZADDRESS        ; set bank to song base address + 1c!
0137              195 
0137              196 noloop:
0137              197 ; Now set HL to song data pointer - longword at 0x0034 into the VGM header 
0137 2a 02 01     198         ld hl,(SongBaseAddress)    ; 00001ef7, need to add 83 to skip header and
013a              199                                    ; byte size
013a              200         ;ld bc, $0080            ; skip the header
013a              201         ;xor a 
013a              202         ;adc hl,bc  ; 0x100              ; 1f2b 1f2e is wrong! should be 1f7a
013a 22 b1 01     203         ld (ZadrWork),hl           ; 16bit addition ; START BAD CODE
013d              204         ;ld bc,$0000
013d 2a 04 01     205         ld hl,(SongBaseAddress+2)
0140              206         ;adc hl,bc ; catch the carry 
0140 22 b3 01     207         ld (ZadrWork+2),hl              ; < ok
0143 cd b5 01     208         call SETZADDRESS   
0146              209 
0146              210 
0146 2b           211         dec hl  ;) < go down one because we call GetNextSongByte below
0147              212 PLAYLOOP:
0147              213 ;;;;;;;;;;;;;;;;               ; +27..400
0147 3a 0c 01     214         ld a,(SAMPTOWAIT)
014a b7           215         or a 
014b 28 1e        216         jr z, _nosampwt
014d e5           217         push hl 
014e 2a 0c 01     218          ld hl,(SAMPTOWAIT)
0151 ed 4b 0e 01  219          ld bc,(LOCALEWAIT) 
0155 ed 42        220          sbc hl,bc
0157 fa 61 01     221          jp m,_zero 
015a 22 0c 01     222          ld (SAMPTOWAIT),hl 
015d e1           223         pop hl 
015e c3 84 01     224         jp FRAMEOVER ; SKIP THIS FRAME IF TIME REMAINS.
0161              225 _zero:
0161 21 00 00     226          ld hl, 0
0164 22 0c 01     227          ld (SAMPTOWAIT), hl 
0167 e1           228         pop hl 
0168 c3 84 01     229         jp FRAMEOVER 
016b              230 _nosampwt:
016b 23           231         inc hl                  ; +6
016c 7c           232         ld a,h                  ; +4
016d e6 80        233         and $80                 ; +7
016f cc 24 02     234         call z,BANKUP ; this also sets HL to 8000 +17/10
0172 7e           235         LD A,(HL)
0173              236         ; sub 50h, times 2 + &CMDJUMPTABLE
0173 16 50        237         ld d,$50
0175 92           238         sub d 
0176 cb 27        239         sla a ; a = (a-50)*2 + jumptab
0178 01 31 00     240         ld bc,CMDJUMPTABLE 
017b 81           241         add a,c   ; bc+a =>
017c 4f           242         ld c,a    ;  de
017d 0a           243         ld a,(bc) 
017e 5f           244         ld e,a 
017f 03           245         inc bc 
0180 0a           246         ld a,(bc) 
0181 57           247         ld d,a
0182 d5           248         push de 
0183 c9           249         ret 
0184              250 
0184              251 
0184              252 FRAMEOVER:
0184              253 ;;;;;;;;;;;
0184              254 ; * A
0184              255         
0184              256         ;call ProcessSampleQueue   ; rearrange queued samples
0184              257 ; Waits until next vblank signal (done via 68k)
0184 01 00 00     258         ld bc,0
0187              259 _framewait:
0187 03           260         inc bc 
0188 3a 00 01     261         LD A,(PlayNext)  ; check the 'play next frame' var
018b fe 01        262         CP 1             ; is it = 1?
018d 20 f8        263         JR NZ,_framewait  ; if not, loop.
018f af           264         xor a            ; if it is, clear it.
0190 32 00 01     265         ld (PlayNext),a 
0193 ed 43 0a 01  266         ld (FREECYCLES),bc
0197              267         ;call DACBLOCKTRANSFER  
0197 c3 47 01     268         JP PLAYLOOP 
019a              269 ;;;; 
019a              270 
019a              271 
019a              272 ;;;;;;;;;;;;;;;;;;;
019a 99           273 ERRDEFB: DEFB $99
019b              274 ; This error handling is super rudimentary and only intended to get songs to
019b              275 ;  play without crashing!
019b              276 ERROR:  
019b              277         ;jp ERROR 
019b c3 1c 01     278         jp LOADVGM
019e              279 
019e 55           280 _songoverb: defb $55
019f              281 SONGOVER:
019f              282 ;;;;;;;;;;;
019f              283 ; * A
019f              284 ; Stops the song when hits command byte 0x66
019f              285 ;  Or, if looping, jumps to loop
019f c3 1c 01     286         jp LOADVGM
01a2              287 
01a2              288 
01a2              289 VOLUMESET:
01a2              290         ;JP PLAYLOOP  
01a2 c3 a2 01     291         JP VOLUMESET 
01a5              292         
01a5              293 
01a5 11           294 aaa: defb $11
01a6              295 WRITEPCM:
01a6              296         ;jp PLAYLOOP  
01a6 c3 a6 01     297         JP WRITEPCM 
01a9 22           298 bbb: defb $22
01aa              299 ; Waits 1-16 samples
01aa              300 QWAIT:
01aa              301 
01aa c3 47 01     302         JP PLAYLOOP 
01ad 33           303 ccc: defb $33
01ae              304 QFMWAIT:
01ae c3 84 01     305         jp FRAMEOVER
01b1              306         ;JP QFMWAIT 
01b1              307 
01b1 00 00 00 00  308 ZadrWork: defb 0,0,0,0
01b5              309 
01b5              310 SETZADDRESS:
01b5              311 ;;;;;;;;;;;;;;;;;;
01b5              312 ; * A H L, RomBank, ZadrWork, 
01b5              313 ; Input: ZadrWork 32-bit address (68000 memory)
01b5              314 ; Output: changes active rom bank, and sets HL to mem addr
01b5 2a b2 01     315         ld hl,(ZadrWork+1) ; ignore bits 0-7, so we have 8-23
01b8 af           316         xor a ; clc 
01b9 cb 3c        317         srl h
01bb cb 1d        318         rr l   ; hl >> 1
01bd cb 3c        319         srl h
01bf cb 1d        320         rr l   ; hl >> 2
01c1 cb 3c        321         srl h
01c3 cb 1d        322         rr l   ; hl >> 3
01c5 cb 3c        323         srl h
01c7 cb 1d        324         rr l   ; hl >> 4
01c9 cb 3c        325         srl h
01cb cb 1d        326         rr l   ; hl >> 5
01cd cb 3c        327         srl h
01cf cb 1d        328         rr l   ; hl >> 6
01d1 cb 3c        329         srl h
01d3 cb 1d        330         rr l   ; hl >> 7 
01d5 7d           331         ld a,l 
01d6 32 06 01     332         ld (RomBank),a ; BITS 15-22
01d9 3a 00 40     333         LD A,($4000) 
01dc 87           334         ADD A, A 
01dd 38 fc        335         JR C,-4
01df cd 00 02     336         call BANKSWAP
01e2 2a b1 01     337         LD HL,(ZadrWork)  ; 0-15 
01e5 3e 7f        338         ld a,$7f 
01e7 a4           339         and h 
01e8 f6 80        340         or $80 ; always set top bit so we look at $8000 + 
01ea 67           341         ld h,a
01eb e5           342         push hl 
01ec 21 00 00     343         ld hl,$0000 
01ef 22 b1 01     344         ld (ZadrWork),hl 
01f2 22 b3 01     345         ld (ZadrWork+2),hl 
01f5 e1           346         pop hl 
01f6              347         ; [HL] now contains memory pointer!
01f6 c9           348         ret
01f7              349 ;;;;
01f7              350 
01f7 00 00 00 00 00 00 00 00 00  351 bankwork: defb 0,0,0,0,0,0,0,0,0
0200              352 
0200              353 BANKSWAP:
0200              354 ;;;;;;;;;;;;;
0200              355 ; * A (preserve bc/hl)
0200              356 ; RomBank has the # of the 32kb block to write to 6000.
0200              357 ; (Currently does not support > 8mb)
0200              358 ; Must write bank bits from 0-8 in ascending order in BYTE size
0200              359 ;  e.g. 00000000 or 00000001 x 9
0200 c5           360         push bc                         
0201 e5           361         push hl 
0202              362 ;; - convert RomBank to binary 
0202 21 f7 01     363         ld hl,bankwork    ; &bankwork
0205 0e 01        364         ld c,1
0207              365 _bankworkloop
0207 3a 06 01     366         ld a,(RomBank)  
020a a1           367         and c           ; bank & 001 ... bank & 010 ... 
020b 77           368         ld (hl),a 
020c 23           369         inc hl          ; bankwork++
020d cb 21        370         sla c           ; c << 1
020f 30 f6        371         jr nc,_bankworkloop
0211              372 ;; - write one byte at a time to bank register
0211 21 f7 01     373         ld hl,bankwork  ; &bankwork
0214 01 09 00     374         ld bc,9         ; for i < 9...
0217              375 _b0r
0217 7e           376         ld a,(hl)
0218 32 00 60     377         ld ($6000),a    ; bank register
021b 23           378         inc hl 
021c 0b           379         dec bc 
021d 79           380         ld a,c 
021e b0           381         or b 
021f 20 f6        382         jr nz,_b0r
0221              383         ; reset/return
0221 e1           384         pop hl 
0222 c1           385         pop bc 
0223 c9           386         ret
0224              387 
0224              388 
0224              389 ;;;;                                    ; ~300?
0224              390 
0224              391 BANKUP:
0224              392 ;;;;;;;;;;;;;;
0224              393 ; * A H L
0224              394 ; Pops up the rom bank by 1 and 
0224              395 ; sets HL back to $8000
0224 3a 06 01     396         ld a,(RomBank)          ; +13
0227 3c           397         inc a                   ; +4   
0228 32 06 01     398         ld (RomBank),a          ; +13
022b cd 00 02     399         call BANKSWAP           ; +17 +(BANKSWAP)
022e 21 00 80     400         ld hl,$8000             ; +10
0231 c9           401         ret                     ; +10
0232              402 ;;;;                            ; Total : 67+~300
0232              403 
0232              404 GETROMADDRESS: 
0232              405 ;;;;;;;;;;;;;;
0232              406 ; INPUT: ZadrWork+0 BANK
0232              407 ;        ZadrWork+2~ZadrWork+3 HL
0232              408 ; (bank * 8000) + HL & 7fff
0232              409 ; OUTPUT: ZadrWork ~ ZadrWork+3 CONTAINS LONGWORD ADDRESS
0232              410 ; * A
0232              411 ; Preserves HL
0232 e5           412         push hl
0233 c5           413         push bc  
0234 af           414          xor a ; clc 
0235 3a b1 01     415          ld a,(ZadrWork) ; contains RomBank, A15-A22
0238              416          ; 15:
0238 e6 01        417          and $1 
023a cb 1f        418          rr a   ; 15 > carry 
023c cb 1f        419          rr a   ; carry > 7, carry = 0
023e 47           420          ld b,a ; contains bit 15 ; SAVE
023f 3a b1 01     421          ld a,(ZadrWork) ; 15-22...
0242 e6 fe        422          and $fe
0244 cb 3f        423          srl a    ; and the last bit and shift RIGHT, so we have 16-23 (minus23)
0246 2a b3 01     424          ld hl,(ZadrWork+2) 
0249 32 b3 01     425          ld (ZadrWork+2),a ; put it in the 3rd byte 
024c af           426          xor a 
024d 32 b1 01     427          ld (ZadrWork),a 
0250 32 b2 01     428          ld (ZadrWork+1),a ; zero the first two
0253              429          
0253 3e 7f        430          ld a,$7f 
0255 a4           431          and h ; hl = bits 0-14, dont forget 15 in b!
0256 b0           432          or b           ; d(>.< )
0257 67           433          ld h,a
0258 22 b1 01     434          ld (ZadrWork),hl 
025b af           435          xor a 
025c 32 b4 01     436          ld (ZadrWork+3),a ; 24-31 are always 0
025f c1           437         pop bc 
0260 e1           438         pop hl 
0261 c9           439         RET 
0262              440 
0262              441 
0262              442 
0262              443 WRITEFM1:
0262              444 ;;;;;;;;;;;;;;;;;;;
0262              445 ; HL - location of song byte
0262              446 ; * A  
0262 23           447         inc hl                  ; +6
0263 7c           448         ld a,h                  ; +4
0264 e6 80        449         and $80                 ; +7
0266 cc 24 02     450         call z,BANKUP ; this also sets HL to 8000 +17/10
0269 3a 00 40     451         LD A,($4000) 
026c 87           452         ADD A, A 
026d 38 fc        453         JR C,-4
026f 7e           454         LD A,(HL) 
0270 32 00 40     455         LD (FMREG0),A
0273 23           456         inc hl                  ; +6
0274 7c           457         ld a,h                  ; +4
0275 e6 80        458         and $80                 ; +7
0277 cc 24 02     459         call z,BANKUP ; this also sets HL to 8000 +17/10
027a 3a 00 40     460         LD A,($4000) 
027d 87           461         ADD A, A 
027e 38 fc        462         JR C,-4
0280 7e           463         LD A,(HL) 
0281 32 01 40     464         LD (FMDAT0),A 
0284 c3 47 01     465         JP PLAYLOOP
0287              466 ;;;;
0287              467 
0287              468 ZWAIT:
0287              469 ;;;;;;;;;;;;;;;;;;
0287              470 ; * A C
0287 3a 00 40     471         LD A,($4000) 
028a 87           472         ADD A, A 
028b 38 fc        473         JR C,-4
028d c9           474         RET 
028e              475 ;;;;
028e              476 
028e              477 
028e              478 
028e              479 
028e              480 WRITEFM2:
028e              481 ;;;;;;;;;;;;;;;;
028e              482 ; HL = song byte
028e              483 ; * A
028e 23           484         inc hl                  ; +6
028f 7c           485         ld a,h                  ; +4
0290 e6 80        486         and $80                 ; +7
0292 cc 24 02     487         call z,BANKUP ; this also sets HL to 8000 +17/10
0295 3a 00 40     488         LD A,($4000) 
0298 87           489         ADD A, A 
0299 38 fc        490         JR C,-4
029b 7e           491         LD A,(HL) 
029c 32 02 40     492         LD (FMREG1),A 
029f 23           493         inc hl                  ; +6
02a0 7c           494         ld a,h                  ; +4
02a1 e6 80        495         and $80                 ; +7
02a3 cc 24 02     496         call z,BANKUP ; this also sets HL to 8000 +17/10
02a6 3a 00 40     497         LD A,($4000) 
02a9 87           498         ADD A, A 
02aa 38 fc        499         JR C,-4
02ac 7e           500         LD A,(HL) 
02ad 32 03 40     501         LD (FMDAT1),A 
02b0 c3 47 01     502         JP PLAYLOOP 
02b3              503 ;;;;
02b3              504 
02b3              505 WRITEPSG:
02b3              506 ;;;;;;;;;;;;;;;;
02b3              507 ; HL = song byte 
02b3              508 ; * A
02b3 23           509         inc hl                  ; +6
02b4 7c           510         ld a,h                  ; +4
02b5 e6 80        511         and $80                 ; +7
02b7 cc 24 02     512         call z,BANKUP ; this also sets HL to 8000 +17/10
02ba              513         ;CALL ZWAIT 
02ba 7e           514         LD A,(HL) 
02bb 32 11 7f     515         ld (PSGREG),a 
02be c3 47 01     516         JP PLAYLOOP 
02c1              517 ;;;;
02c1              518 
02c1              519 
02c1              520 
02c1              521 SAMPLEWAIT:
02c1              522 ;;;;;;;;;;;
02c1              523 ; * A, B, C
02c1              524 ; HL = song byte
02c1 23           525         inc hl                  ; +6
02c2 7c           526         ld a,h                  ; +4
02c3 e6 80        527         and $80                 ; +7
02c5 cc 24 02     528         call z,BANKUP ; this also sets HL to 8000 +17/10
02c8 7e           529         ld a,(hl)
02c9 4f           530         ld c,a 
02ca 23           531         inc hl                  ; +6
02cb 7c           532         ld a,h                  ; +4
02cc e6 80        533         and $80                 ; +7
02ce cc 24 02     534         call z,BANKUP ; this also sets HL to 8000 +17/10
02d1 7e           535         ld a,(hl)
02d2 47           536         ld b,a 
02d3 04           537         inc b ; FIXME: This is to fix the "too fast" sample wait
02d4 ed 43 0c 01  538         ld (SAMPTOWAIT),bc 
02d8 c3 47 01     539         JP PLAYLOOP 
02db              540 
02db              541 
02db              542 
02db              543 CLEARPSG:
02db              544 ;;;;;;;;;;;;;;;;;;;;
02db              545 ; clear the SSG (mute)
02db              546 ; * A, B (preserve HL)
02db e5           547         push hl 
02dc 21 20 00     548         LD HL,CLRTB 
02df 06 04        549         ld b,4
02e1              550 _clearlp:
02e1 7e           551         ld a,(hl) 
02e2 32 11 7f     552         ld (PSGREG),a 
02e5 23           553         inc hl                  ; +6
02e6 7c           554         ld a,h                  ; +4
02e7 e6 80        555         and $80                 ; +7
02e9 cc 24 02     556         call z,BANKUP ; this also sets HL to 8000 +17/10
02ec 10 f3        557         djnz _clearlp
02ee e1           558         pop hl 
02ef c9           559         RET
02f0              560 ;;;;
02f0              561 
02f0              562 KHZRATE8: equ 134
02f0              563 
02f0              564 ;; DAC STUFF:
02f0              565 
02f0 00 00        566 DacWRAM: defb 0, 0
02f2              567 DACWORK
02f2 00 00 00 00  568         defb 0,0,0,0
02f6              569 
02f6 0a           570 Idles: defb $a
02f7              571 
02f7              572 
02f7              573 
02f7              574 DACTRANSFER:
02f7              575 ; CHECKS BOTH SAMPLE1ADDRESS AND SONGSAMPADDRESS EACH LOOP
02f7              576 ; SAMPLE1ADDRESS IS ACTIVE SFX 
02f7              577 ; SONGSAMPADDRESS IS ACTIVE MUSIC-BASED SAMPLE
02f7              578 ; WRITE ONE BYTE FROM EACH, INCREMENT RESPECTIVE POINTER
02f7              579 ; LOOP N KHZ TIMES
02f7              580 ; AT THE END OF EACH FRAME, ROTATE THE SFX AND MUSIC SAMPLE QUEUE TO ACTIVE ADDRESSES,
02f7              581 ;  UP TO 8, IF THEY EXIST. 
02f7              582 ; + WHEN STARTING A MUSIC SAMPLE OR SFX, ADD IT TO QUEUE INSTEAD.
02f7              583 ; + FRAME END: GRAB QUEUED U32 FROM BUS AND ADD TO END OF Q
02f7              584 ; + ONLY 1 SFX STARTABLE PER FRAME
02f7              585 
02f7              586 
02f7              587 
02f7              588 DACBLOCKTRANSFER:
02f7              589         ; DEBUG ret 
02f7              590 ;        ret
02f7 af           591         xor a 
02f8 e5           592         push hl 
02f9 2a 10 01     593          ld hl,(Sample1Address)
02fc ed 5b 12 01  594          ld de,(Sample1Address+2)
0300              595          ;add hl,de 
0300 b4           596          or h 
0301 b5           597          or l 
0302 b2           598          or d  ; 3 cycles faster
0303 b3           599          or e
0304 28 02        600          jr z,_nosample 
0306              601          ; ok, sample found
0306 18 02        602          jr _playsample
0308              603 _nosample:
0308 e1           604         pop hl 
0309 c9           605         ret 
030a              606 
030a              607 _playsample:
030a              608         ; PRESERVE CURRENT ROM BANK AND SONG PTR IN WORKRAM~+3
030a 3a 06 01     609          ld a,(RomBank) 
030d 32 f2 02     610          ld (DACWORK),a 
0310 af           611          xor a
0311 32 f3 02     612          ld (DACWORK+1),a     ; saving me for later!
0314 e1           613         pop hl 
0315 22 f4 02     614         ld (DACWORK+2),hl    ; save hl ofc 
0318              615         
0318              616         ; change zadr to sample location
0318              617 _noin2
0318 2a 10 01     618         ld hl,(Sample1Address)
031b 22 b1 01     619         ld (ZadrWork),hl 
031e 2a 12 01     620         ld hl,(Sample1Address+2)
0321 22 b3 01     621         ld (ZadrWork+2),hl 
0324 cd b5 01     622         call SETZADDRESS
0327              623         
0327              624         ; hl has address of sample, FIXME 184 samples/frame = ntsc/11khz
0327 ed 4b e4 03  625         ld bc,(DacFrequency) ;KHZRATE8 ; 8kb sample in 1 second
032b              626         ; loop ....
032b              627         ; dac on 
032b 3e 2b        628         ld a,$2b 
032d 32 00 40     629         ld ($4000),a
0330 3e 80        630         ld a,$80
0332 32 01 40     631         ld ($4001),a
0335 3e 2a        632         ld a,$2a
0337 32 00 40     633         ld ($4000),a 
033a              634 _dacwriteloop:
033a              635 ;;; ONE SAMPLE AT 8KHZ, NTSC:
033a 00           636         NOP 
033b 00           637         nop 
033c 00           638         nop 
033d 00           639         nop 
033e 00           640         nop 
033f e5           641         push hl 
0340 21 0a 00     642         ld hl,$a ; < dont go higher than c!
0343              643 _atst
0343 00           644         NOP 
0344 7d           645         ld a,l 
0345 b4           646         or h 
0346 2b           647         dec hl 
0347 20 fa        648         jr nz,_atst
0349 e1           649         pop hl 
034a              650 ;;;
034a 7e           651         ld a,(hl)
034b 32 01 40     652         ld ($4001),a 
034e 23           653         inc hl                  ; +6
034f 7c           654         ld a,h                  ; +4
0350 e6 80        655         and $80                 ; +7
0352 cc 24 02     656         call z,BANKUP ; this also sets HL to 8000 +17/10
0355 0b           657         dec bc 
0356 78           658         ld a,b 
0357 b1           659         or c 
0358 20 e0        660         jr nz,_dacwriteloop
035a              661         ; dac off 
035a 3e 2b        662         ld a,$2b 
035c 32 00 40     663         ld ($4000),a
035f af           664         xor a
0360 32 01 40     665         ld ($4001),a 
0363              666         
0363              667         ; add32 addr + freq 
0363 af           668         xor a   ; clc
0364 2a 10 01     669         ld hl,(Sample1Address)
0367 ed 4b e4 03  670         ld bc,(DacFrequency)
036b 09           671         add hl,bc 
036c 22 10 01     672         ld (Sample1Address),hl 
036f              673         ;jr nc,_noincad
036f              674         ;ld hl, (Sample1Address+2)
036f              675         ;inc hl 
036f              676         ;ld (Sample1Address+2),hl 
036f              677 _noincad
036f              678 ; cmp32: Sample1Address vs Sample1Length 
036f              679 ; if = or < check low
036f 2a 14 01     680         ld hl,(Sample1Length)
0372 ed 4b 10 01  681         ld bc,(Sample1Address)
0376 ed 42        682         sbc hl,bc 
0378 38 0a        683         jr c,_dacover  ; if cur adr > len end
037a              684         ;jr z,_dacover
037a              685 ;        ld hl,(Sample1Length+2)
037a              686 ;        ld bc,(Sample1Address+2)
037a              687 ;        sbc hl,bc 
037a              688 ;        jr c,_dacover ; if cur adr is > end
037a              689 _condac
037a 3a f2 02     690         ld a,(DACWORK)
037d cd 00 02     691         call BANKSWAP
0380 2a f4 02     692         ld hl,(DACWORK+2)
0383 c9           693         ret
0384              694 _dacover:
0384 21 00 00     695         ld hl,0
0387 22 10 01     696         ld (Sample1Address),hl 
038a 22 12 01     697         ld (Sample1Address+2),hl
038d 22 14 01     698         ld (Sample1Length),hl 
0390 22 16 01     699         ld (Sample1Length+2),hl
0393              700         
0393 18 e5        701         jr _condac
0395              702 ;;;;
0395              703 
0395              704 QUICKSTOP:
0395              705 
0395 c9           706         RET 
0396              707 
0396              708 STOPDAC:
0396              709 ;;;;;;;;;;;;;;
0396              710 ; Stops DAC and disables DAC mode on CH6
0396              711 ; FIXME broken ?
0396 23           712         inc hl                  ; +6
0397 7c           713         ld a,h                  ; +4
0398 e6 80        714         and $80                 ; +7
039a cc 24 02     715         call z,BANKUP ; this also sets HL to 8000 +17/10
039d              716   
039d c3 47 01     717         jp PLAYLOOP  
03a0              718 ;;;
03a0              719 
03a0 00           720 StreamID: defb 0
03a1              721 
03a1              722 ;; Ignore DACSETUP because we dont care for meagdrive.
03a1              723 ; 90 0 2 0 2a 
03a1              724 ; TODO SUPPORT MORE THAN ONE DAC STREAM :)
03a1              725 DACSETUP: 
03a1              726         ;INC HL  ; set STREAM ID 
03a1 23           727         inc hl                  ; +6
03a2 7c           728         ld a,h                  ; +4
03a3 e6 80        729         and $80                 ; +7
03a5 cc 24 02     730         call z,BANKUP ; this also sets HL to 8000 +17/10
03a8              731         ; CHIP
03a8 23           732         inc hl                  ; +6
03a9 7c           733         ld a,h                  ; +4
03aa e6 80        734         and $80                 ; +7
03ac cc 24 02     735         call z,BANKUP ; this also sets HL to 8000 +17/10
03af              736         ; PORT 
03af 23           737         inc hl                  ; +6
03b0 7c           738         ld a,h                  ; +4
03b1 e6 80        739         and $80                 ; +7
03b3 cc 24 02     740         call z,BANKUP ; this also sets HL to 8000 +17/10
03b6              741         ; DATA BYTE 
03b6 23           742         inc hl                  ; +6
03b7 7c           743         ld a,h                  ; +4
03b8 e6 80        744         and $80                 ; +7
03ba cc 24 02     745         call z,BANKUP ; this also sets HL to 8000 +17/10
03bd              746         
03bd c3 47 01     747         jp PLAYLOOP 
03c0              748 
03c0              749 ;; Ignore SETDACSTREAM because we control our own streams.
03c0              750 SETDACSTREAM:        
03c0              751 ; 0X91 <STREAM> <DATABANK ID> <STEP SIZE> <STEP BASE>
03c0              752 ;         0           0            1           0 
03c0              753 
03c0              754        ; STREAM ID AND DATABANK
03c0 23           755         inc hl                  ; +6
03c1 7c           756         ld a,h                  ; +4
03c2 e6 80        757         and $80                 ; +7
03c4 cc 24 02     758         call z,BANKUP ; this also sets HL to 8000 +17/10
03c7 23           759         inc hl                  ; +6
03c8 7c           760         ld a,h                  ; +4
03c9 e6 80        761         and $80                 ; +7
03cb cc 24 02     762         call z,BANKUP ; this also sets HL to 8000 +17/10
03ce              763         ;STEP AND STEP BASE
03ce 23           764         inc hl                  ; +6
03cf 7c           765         ld a,h                  ; +4
03d0 e6 80        766         and $80                 ; +7
03d2 cc 24 02     767         call z,BANKUP ; this also sets HL to 8000 +17/10
03d5 23           768         inc hl                  ; +6
03d6 7c           769         ld a,h                  ; +4
03d7 e6 80        770         and $80                 ; +7
03d9 cc 24 02     771         call z,BANKUP ; this also sets HL to 8000 +17/10
03dc              772        ;pop bc 
03dc c3 47 01     773         jp PLAYLOOP  
03df              774 
03df              775 _invfreq
03df 88           776         defb $88
03e0 c3 e0 03     777 INVALIDFREQ: JP INVALIDFREQ 
03e3              778 
03e3              779 DacTransferActive: 
03e3 00           780         defb 0
03e4              781 DacFrequency:
03e4 8a 00        782         defw 138
03e6              783 RealFrequency: 
03e6 00 00 00 00  784         defb 0,0,0,0
03ea              785 
03ea              786 ; 
03ea              787 FreqTable:
03ea              788         ;DEFW 134,184,267,368,533
03ea 15 02 70 01 0b 01 b8 00 86 00  789         DEFW 533,368,267,184,134
03f4              790 PALFreqTable:
03f4              791         ;DEFW 160,221,320,441,640
03f4 80 02 b9 01 40 01 dd 00 a0 00  792         DEFW 640,441,320,221,160
03fe              793 
03fe              794 ; $92
03fe              795 ;SETSTREAMFREQUENCY
03fe              796 SETDACFREQ: ; 7D00 == 32000
03fe              797 ; 7D00 = 32000 = 533 N 640P ; 
03fe              798 ; 5622 = 22050 = 368 N 441P ; 
03fe              799 ; 3E80 = 16000 = 267 N 320P ; 
03fe              800 ; 2b11 = 11025 = 184 N 221P
03fe              801 ; 1f40 = 8000 =  134 N 160P
03fe              802         
03fe              803         ; stream :
03fe 23           804         inc hl                  ; +6
03ff 7c           805         ld a,h                  ; +4
0400 e6 80        806         and $80                 ; +7
0402 cc 24 02     807         call z,BANKUP ; this also sets HL to 8000 +17/10
0405              808         ; byte 0
0405 23           809         inc hl                  ; +6
0406 7c           810         ld a,h                  ; +4
0407 e6 80        811         and $80                 ; +7
0409 cc 24 02     812         call z,BANKUP ; this also sets HL to 8000 +17/10
040c              813         ; byte 1
040c 23           814         inc hl                  ; +6
040d 7c           815         ld a,h                  ; +4
040e e6 80        816         and $80                 ; +7
0410 cc 24 02     817         call z,BANKUP ; this also sets HL to 8000 +17/10
0413 7e           818         ld a,(hl)
0414 e5           819          push hl 
0415 21 ea 03     820          ld hl,FreqTable
0418 c5           821          push bc 
0419 01 0a 00     822          ld bc,10 
041c f5           823          push af 
041d 3a 08 01     824          ld a,(PALFlag)
0420 fe 01        825          cp 1
0422 20 01        826          jr nz,_notpal
0424 09           827          add hl,bc 
0425              828 _notpal:
0425 f1           829         pop af 
0426 01 00 00     830         ld bc,0
0429 fe 7d        831         cp $7d 
042b 28 27        832         jr z,_ffr
042d fe 56        833         cp $56 
042f 28 0f        834         jr z,_bb 
0431 fe 3e        835         cp $3e 
0433 28 10        836         jr z,_cc 
0435 fe 2b        837         cp $2b 
0437 28 11        838         jr z,_dd 
0439 fe 1f        839         cp $1f 
043b 28 12        840         jr z,_ee 
043d              841         ; else:
043d c3 e0 03     842         jp INVALIDFREQ
0440              843 _bb
0440 01 02 00     844         ld bc,2
0443 18 0f        845         jr _ffr
0445              846 _cc 
0445 01 04 00     847         ld bc,4
0448 18 0a        848         jr _ffr
044a              849 _dd 
044a 01 06 00     850         ld bc,6
044d 18 05        851         jr _ffr
044f              852 _ee 
044f 01 08 00     853         ld bc,8
0452 18 00        854         jr _ffr
0454              855 _ffr:
0454 09           856         add hl,bc ; hl = freqtable + palflag*10 + freq# offset
0455 4e           857         ld c,(hl)
0456 23           858         inc hl 
0457 46           859         ld b,(hl)
0458 ed 4b e4 03  860         ld bc,(DacFrequency)
045c c1           861     pop bc 
045d e1           862     pop hl 
045e              863     ; both 0
045e 23           864         inc hl                  ; +6
045f 7c           865         ld a,h                  ; +4
0460 e6 80        866         and $80                 ; +7
0462 cc 24 02     867         call z,BANKUP ; this also sets HL to 8000 +17/10
0465 23           868         inc hl                  ; +6
0466 7c           869         ld a,h                  ; +4
0467 e6 80        870         and $80                 ; +7
0469 cc 24 02     871         call z,BANKUP ; this also sets HL to 8000 +17/10
046c c3 47 01     872     jp PLAYLOOP 
046f              873 
046f              874 
046f              875 ;;;;;;;;;;;;;;;;;
046f              876 STARTDACSTREAM:
046f              877 ;        inc hl  ; stream id 
046f              878         ; TODO NOT USED IN MY EXAMPLES
046f 18 fe        879         JR STARTDACSTREAM
0471              880 
0471              881 GETBLOCKSTRUCT:
0471              882 ;;;;;;;;;;;;;;;;;;
0471              883 ; IN: [A]
0471              884 ; OUT: HL
0471              885 ; PRESERVES BC 
0471              886 ; * A H L 
0471 c9           887         RET 
0472              888 
0472              889 ; 95 00 (0-15) 00
0472 00           890 ActiveDacBlock: defb 0  ; which block 0-15 stored below
0473 00 00 00 00  891 ActiveDacCtr: defb 0,0,0,0 ; 32bit count
0477 00 00        892 ActiveDacLoc: defb 0,0  ; what is the memory offset
0479 00           893 ActiveDacBank: defb 0   ; which 68000 memory bank
047a 00           894 LoopDac: defb 0
047b              895 
047b              896 DACFASTCALL:
047b              897 ;;;;;;;;;;;;;;;;;;;;;;;;
047b              898 ; This should start the DAC playback
047b              899 ; 95 00 IDID 00
047b              900 ; for data block info:
047b              901 ; data type 1
047b              902 ; datasize 4
047b              903 ; dataloc 2  (hl) 
047b              904 ; databank 1 (rom)
047b              905 ; datacounter 4 (bytes left this loop)
047b              906 ; blockactive 1 (gogogo)
047b              907 ; 0X95
047b              908 ; NOTE: Optimized using processvgm.py, only has 1 byte argument
047b 23           909         inc hl                  ; +6
047c 7c           910         ld a,h                  ; +4
047d e6 80        911         and $80                 ; +7
047f cc 24 02     912         call z,BANKUP ; this also sets HL to 8000 +17/10
0482 23           913         inc hl                  ; +6
0483 7c           914         ld a,h                  ; +4
0484 e6 80        915         and $80                 ; +7
0486 cc 24 02     916         call z,BANKUP ; this also sets HL to 8000 +17/10
0489 23           917         inc hl                  ; +6
048a 7c           918         ld a,h                  ; +4
048b e6 80        919         and $80                 ; +7
048d cc 24 02     920         call z,BANKUP ; this also sets HL to 8000 +17/10
0490 23           921         inc hl                  ; +6
0491 7c           922         ld a,h                  ; +4
0492 e6 80        923         and $80                 ; +7
0494 cc 24 02     924         call z,BANKUP ; this also sets HL to 8000 +17/10
0497 c3 47 01     925         jp PLAYLOOP 
049a              926 
049a              927 
049a              928 ;; 
049a              929 
049a              930 ;;
049a              931 
049a              932 ; Data Block struct:
049a ff           933 DataType: defb $ff
049b 00 00 00 00  934 DataSize: defb 0,0,0,0
049f 00 00        935 DataLoc: defb 0,0               ; hl 
04a1 00           936 DataBank: defb 0                ; current rombank
04a2 00 00 00 00  937 DataCounter: defb 0,0,0,0       ; equals DataSize when intialized
04a6 00           938 BlockActive: defb 0
04a7 00 00 00     939 _buffer: defb 0,0,0          ; 16 bytes 
04aa              940 ;Type (ff means empty) 1
04aa              941 ; Compatible types:
04aa              942 ; 0: YM2612 PCM data 
04aa              943 ;Size 4
04aa              944 ; 32 bit size (from VGM file)
04aa              945 ;Loc 2 (HL offset of data start)
04aa              946 ;Bank 1 (bank of data start)
04aa              947 ;Counter 4 (32bit offset remaining to play of this loop)
04aa              948 ;BlockActive: 1 if we need to dac stream it, 0 skips
04aa              949 ;_buffer 3 : to align to 16 bytes
04aa ff 00 00 00 00 00 00 00  950 Block1: defb $ff,0,0,0,0,0,0,0
04b2 00 00 00 00 00 00 00 00  951         defb $0,0,0,0,0,0,0,0
04ba ff 00 00 00 00 00 00 00  952 Block2: defb $ff,0,0,0,0,0,0,0
04c2 00 00 00 00 00 00 00 00  953         defb $0,0,0,0,0,0,0,0
04ca ff 00 00 00 00 00 00 00  954 Block3: defb $ff,0,0,0,0,0,0,0
04d2 00 00 00 00 00 00 00 00  955         defb $0,0,0,0,0,0,0,0
04da ff 00 00 00 00 00 00 00  956 Block4: defb $ff,0,0,0,0,0,0,0
04e2 00 00 00 00 00 00 00 00  957         defb $0,0,0,0,0,0,0,0
04ea ff 00 00 00 00 00 00 00  958 Block5: defb $ff,0,0,0,0,0,0,0
04f2 00 00 00 00 00 00 00 00  959         defb $0,0,0,0,0,0,0,0
04fa ff 00 00 00 00 00 00 00  960 Block6: defb $ff,0,0,0,0,0,0,0
0502 00 00 00 00 00 00 00 00  961         defb $0,0,0,0,0,0,0,0
050a ff 00 00 00 00 00 00 00  962 Block7: defb $ff,0,0,0,0,0,0,0
0512 00 00 00 00 00 00 00 00  963         defb $0,0,0,0,0,0,0,0
051a ff 00 00 00 00 00 00 00  964 Block8: defb $ff,0,0,0,0,0,0,0
0522 00 00 00 00 00 00 00 00  965         defb $0,0,0,0,0,0,0,0
052a ff 00 00 00 00 00 00 00  966 Block9: defb $ff,0,0,0,0,0,0,0
0532 00 00 00 00 00 00 00 00  967         defb $0,0,0,0,0,0,0,0
053a ff 00 00 00 00 00 00 00  968 Block10: defb $ff,0,0,0,0,0,0,0
0542 00 00 00 00 00 00 00 00  969         defb $0,0,0,0,0,0,0,0
054a ff 00 00 00 00 00 00 00  970 Block11: defb $ff,0,0,0,0,0,0,0
0552 00 00 00 00 00 00 00 00  971         defb $0,0,0,0,0,0,0,0
055a ff 00 00 00 00 00 00 00  972 Block12: defb $ff,0,0,0,0,0,0,0
0562 00 00 00 00 00 00 00 00  973         defb $0,0,0,0,0,0,0,0
056a ff 00 00 00 00 00 00 00  974 Block13: defb $ff,0,0,0,0,0,0,0
0572 00 00 00 00 00 00 00 00  975         defb $0,0,0,0,0,0,0,0
057a ff 00 00 00 00 00 00 00  976 Block14: defb $ff,0,0,0,0,0,0,0
0582 00 00 00 00 00 00 00 00  977         defb $0,0,0,0,0,0,0,0
058a ff 00 00 00 00 00 00 00  978 Block15: defb $ff,0,0,0,0,0,0,0
0592 00 00 00 00 00 00 00 00  979         defb $0,0,0,0,0,0,0,0
059a              980 
059a 00 00        981 DBWORK: defb 0,0
059c              982 
059c              983 ProcessSampleQueue:
059c c9           984         ret 
059d              985 
059d              986 DATABLOCK:
059d              987 ;;;;;;;;;;;;
059d              988 ;
059d d5           989       push de 
059e 23           990         inc hl                  ; +6
059f 7c           991         ld a,h                  ; +4
05a0 e6 80        992         and $80                 ; +7
05a2 cc 24 02     993         call z,BANKUP ; this also sets HL to 8000 +17/10
05a5 7e           994         ld a,(hl) 
05a6              995         ; find an empty block of pointers
05a6 e5           996         push hl ;9f43 = 66
05a7 21 8a 04     997          ld hl,DataType-16
05aa 01 10 00     998          ld bc,16      ; 16 BYTES IN SIZE 
05ad              999 _blockfind:
05ad af          1000          xor a 
05ae ed 4a       1001          adc hl,bc 
05b0 7e          1002          ld a,(hl)    ; hl += 16
05b1 fe ff       1003          cp $ff 
05b3 28 02       1004          jr z,_blockok 
05b5 18 f6       1005          jr _blockfind 
05b7             1006 _blockok:         
05b7 e5          1007          push hl 
05b8 c1          1008          pop bc ; now BC has block struct pointer. 
05b9 ed 43 9a 05 1009          LD (DBWORK),BC 
05bd e1          1010         pop hl                  
05be             1011 
05be 23          1012         inc hl                  ; +6
05bf 7c          1013         ld a,h                  ; +4
05c0 e6 80       1014         and $80                 ; +7
05c2 cc 24 02    1015         call z,BANKUP ; this also sets HL to 8000 +17/10
05c5 7e          1016         ld a,(hl) 
05c6 02          1017         ld (bc),a  ; data type  ; = 0
05c7 23          1018         inc hl                  ; +6
05c8 7c          1019         ld a,h                  ; +4
05c9 e6 80       1020         and $80                 ; +7
05cb cc 24 02    1021         call z,BANKUP ; this also sets HL to 8000 +17/10
05ce             1022         ; TODO: Check data type
05ce             1023         
05ce 03          1024         inc bc 
05cf 7e          1025         ld a,(hl)  ; 9f45 = 77
05d0 02          1026         ld (bc),a ; data size
05d1 32 29 00    1027         ld (WORKRAM),a 
05d4 23          1028         inc hl                  ; +6
05d5 7c          1029         ld a,h                  ; +4
05d6 e6 80       1030         and $80                 ; +7
05d8 cc 24 02    1031         call z,BANKUP ; this also sets HL to 8000 +17/10
05db             1032         
05db 7e          1033         ld a,(hl)
05dc 03          1034         inc bc  
05dd 02          1035         ld (bc),a ; data size+1 = 0c
05de 32 2a 00    1036         ld (WORKRAM+1),a ; for later
05e1 23          1037         inc hl                  ; +6
05e2 7c          1038         ld a,h                  ; +4
05e3 e6 80       1039         and $80                 ; +7
05e5 cc 24 02    1040         call z,BANKUP ; this also sets HL to 8000 +17/10
05e8             1041         
05e8 03          1042         inc bc 
05e9 7e          1043         ld a,(hl) 
05ea 02          1044         ld (bc),a ; data size+2 = 00
05eb 32 2b 00    1045         ld (WORKRAM+2),a 
05ee 23          1046         inc hl                  ; +6
05ef 7c          1047         ld a,h                  ; +4
05f0 e6 80       1048         and $80                 ; +7
05f2 cc 24 02    1049         call z,BANKUP ; this also sets HL to 8000 +17/10
05f5             1050         
05f5 03          1051         inc bc 
05f6 7e          1052         ld a,(hl) 
05f7 02          1053         ld (bc),a ; data size+3 = 00
05f8 32 2c 00    1054         ld (WORKRAM+3),a 
05fb             1055         
05fb             1056         ; now store HL, which is right before data start...
05fb 03          1057         inc bc 
05fc 7d          1058         ld a,l   ; dataloc l...
05fd 02          1059         ld (bc),a 
05fe             1060         
05fe 7c          1061         ld a,h   ; and h
05ff 03          1062         inc bc 
0600 02          1063         ld (bc),a ;
0601             1064         
0601 3a 06 01    1065         ld a,(RomBank) 
0604 03          1066         inc bc     ; DataBank
0605 02          1067         ld (bc),a ; and store current rom bank, cuz this must be where it starts
0606 32 b1 01    1068         ld (ZadrWork),a 
0609 af          1069         xor a 
060a 32 b2 01    1070         ld (ZadrWork+1),a 
060d 22 b3 01    1071         ld (ZadrWork+2),hl ; 0, 0, 9a9f ( = 1a9f)
0610             1072 ;Counter 4 (32bit offset remaining to play of this loop)
0610 2a 29 00    1073         ld hl,(WORKRAM) 
0613 7d          1074         ld a,l 
0614 03          1075         inc bc     ; ctr+0
0615 02          1076         ld (bc),a 
0616 7c          1077         ld a,h 
0617 03          1078         inc bc 
0618 02          1079         ld (bc),a  ; ctr+1 
0619 2a 2b 00    1080         ld hl,(WORKRAM+2) 
061c 7d          1081         ld a,l 
061d 03          1082         inc bc   ; ctr+2
061e 02          1083         ld (bc),a 
061f 7c          1084         ld a,h 
0620 03          1085         inc bc 
0621 02          1086         ld (bc),a  ; ctr+3 
0622             1087         ; BlockActive starts at 0, we set it to 1 when we hit FASTCALL. 
0622             1088         ; so ignore the rest.
0622             1089 
0622             1090         ; NEW FUNCTION: Get 68000 address from current bank/HL
0622 cd 32 02    1091         call GETROMADDRESS
0625             1092         ; ZadrWork = 32bit address of data bank start 
0625             1093         ; WORKRAM = data size 
0625             1094         ; add WORKRAM to ZadrWork
0625 2a b1 01    1095         ld hl,(ZadrWork) ; 
0628 ed 4b 29 00 1096         ld bc,(WORKRAM)  ; data size low 16 
062c b7          1097         or a 
062d ed 4a       1098         adc hl,bc ; check carry 
062f 22 b1 01    1099         ld (ZadrWork),hl ; save low 16
0632 2a b3 01    1100         ld hl,(ZadrWork+2) 
0635 01 00 00    1101         ld bc,$0000
0638 ed 4a       1102         adc hl,bc  ; ok  ; carry is cleared here)
063a ed 4b 2b 00 1103         ld bc,(WORKRAM+2) 
063e ed 4a       1104         adc hl,bc  ; upper 16
0640 22 b3 01    1105         ld (ZadrWork+2),hl 
0643 cd b5 01    1106         call SETZADDRESS  ; s
0646             1107         ; now our song pointer and rom window should be
0646             1108         ; at the byte following the data block -1.
0646 d1          1109      pop de 
0647             1110 _compressed: ; TODO do extra stuff for compressed data
0647             1111 _uncompressed:
0647 c3 47 01    1112         jp PLAYLOOP     
064a             1113 
064a             1114 _emptyblock
064a 3e ff       1115         LD A,$FF 
064c e5          1116         PUSH HL 
064d 2a 9a 05    1117         LD HL,(DBWORK) 
0650 77          1118         LD (HL),A 
0651 e1          1119         POP HL 
0652 d1          1120         POP DE 
0653 c3 47 01    1121         JP PLAYLOOP 
0656             1122 
1559 bytes code generated and 151 labels defined
