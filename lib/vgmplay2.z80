;;;;;;;;;;;;;;;;;
;;
;; Z80 VGM Player
;; 
;; v 0.25
; WARNING: 68k side addresses changed from a00080+ to a00100+
; Set to NTSC 
; Samples currently OFF while debugging
; Watch for macros

; by RetroDevDiscord

; Special thanks to: 
;  Stef 
;  vytah

;;; TO USE: 
; Set byte a00100 to 1 every vblank to play!
; read byte a00101 to see if song is playing or not.
; Set SongBaseAddress (102h-105h) to full 32bit address 
; and RomBank (106h) to bit 15+ of the 68000 memory bank
; If PAL, set the PAL flag to 1 (108h), otherwise, 0=NTSC

; TODOS:
; - Tie z80 to vblank interrupt so it isn't driven by 68000
; - Add error checking for vgm 1.60
; - weirder bytecodes 
; - multiple sample streams 
; - WIP: multiple data blocks

;;;;;
; FIXMEs
; - copy and paste CurDac stuff within dac loop 
; - dac block transfer size needs adjusting / delay based on sample width!


FMREG0 EQU $4000
FMDAT0 EQU $4001
FMREG1 EQU $4002
FMDAT1 EQU $4003
BANKREG EQU $6000
PSGREG EQU $7F11


VGM_START EQU $00 
VGM_END EQU $04       ;*: ; 2004-2005
SSGCLOCK EQU $0C      ; : ; 200c-200f
SAMPLECOUNT EQU $18   ;*:  ; 2018-201b 0X22740
LOOPOFFSET EQU $1c    ;*: 201c-201f
LOOPNUMS EQU $20      ;*:   ; 2020-2023
RATE EQU $24          ;:   ; 2024-2027 = 60
SNFB EQU $28          ;*?:  ; 2028-9 = 0009
SNW EQU $2a           ;*?; 202a = 16
SF EQU $2b            ;*:    ; 202b ; ssg flags all 0
YM2612CLK EQU $2C     ;: ; 202c-202f = 0x750ab6 
VGMDATOFS EQU $34     ;*:  ; 2034-2037
;SPCMCLK EQU $2038       ;:    ; 2038-203b
;SPCMI EQU $203C         ;:   ; 203c-203f
VM EQU $7C            ;: volume modifier (default 0) ; 207c
LB EQU $7E            ;: loop base; 207e
LM EQU $7F            ;: loop modifier; 207f
        
        org $0

; disable interrupts
        di 

; clear the stack
        ld a, 0
        ld de, $1c00 
        ld b, 0 
_clrstack:
        LD (DE),A
        inc de 
        djnz _clrstack
_clr2
        ld (de),a 
        inc de 
        djnz _clr2
_clr3 
        ld (de),a 
        inc de 
        djnz _clr3

; set the stack pointer 
        ld sp,$1d80 

; clear and go!
        call CLEARPSG 
        call BANKSWAP

        jp LOADVGM 
        
; +8 and +9 should contain VGM version number.
;VERSIONCHECK:
;        ld hl, ($2008) 
;        cp h, $60
;        jr nz,WRONGVER
;        cp l, $01
;        jr nz,WRONGVER 
;        jp LOADVGM
;WRONGVER:
;        jp WRONGVER

CLRTB:
        defb $9f,$bf,$df,$ff
LoopPlay: 
        defb 0
LoopLoc:        
        defb 0,0,0,0

WORKRAM: defb 0,0,0,0

SongDataStart: defb 0,0,0,0


; sub 50h then times 2
CMDJUMPTABLE: ; starts at 50h
        defw WRITEPSG, 0, WRITEFM1, WRITEFM2, 0, 0, 0, 0 ; 50-57
        DEFW 0, 0, 0, 0, 0, 0, 0, 0 ;   58-5F
        defw 0, SAMPLEWAIT, FRAMEOVER, FRAMEOVER, 0, 0, SONGOVER, DATABLOCK ; 60-67
        DEFW WRITEPCM, 0, 0, 0, 0, 0, 0, 0
        DEFW QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT ;70
        DEFW QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT, QWAIT ;7F   
        DEFW QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT
        DEFW QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT, QFMWAIT ;..8f
        DEFW DACSETUP, SETDACSTREAM, SETDACFREQ, STARTDACSTREAM, STOPDAC, DACFASTCALL ; 90-95
        DEFW ERROR, FOREVERLOOP  ; 96, 97

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        org $100

; Vars
PlayNext:
        defb 0          ; 100h
SongPlaying: 
        defb 0          ; 101h
SongBaseAddress:        ; Set me when loading the song from the 68000!
        defb $0, $0, 0, 0 ; 102-105h
RomBank:
        defb 0          ; 106h
StartBank:
        defb 0          ; --
; This is 0 if NTSC, and 1 if PAL.
PALFlag: defb 0         ; 108h
; Set this to 1 and the next frame the Z80 will reset (jp 0). 
; Do this after changing SongBaseAddress to change songs. 
ResetFlag: defb 0       ; 109h

FREECYCLES: ; 10Ah
        defw 0 
SAMPTOWAIT:
        defw 0
LOCALEWAIT: 
        defw 0
PALWAIT equ 882 
NTSCWAIT equ 735

Sample1Address: defw 0,0        
Sample1Length:  defw 0,0         ; this is also the address of the next sample in block.

FOREVERLOOP:
        dec hl 
        jp FRAMEOVER

LOADVGM:
;;;;;;;;;;;;;;;;
        ld a,(PALFlag)
        cp 0
        jr z,_ntw
        ld hl,PALWAIT
        ld (LOCALEWAIT),hl 
        jr _ld 
_ntw:
        ld hl,NTSCWAIT
        ld (LOCALEWAIT),hl 
_ld:
        ;LD A,1 
        ;LD (SongPlaying),A      ; set playing var to ON
        LD A,(RomBank) 
        LD (StartBank),A        ; Store the initial ROM bank for looping.
        
; Set the memory window to the song header (+1c)      
        ;ld hl,(SongBaseAddress)
        ;ld bc,$001c 
        ;xor a 
        ;adc hl,bc 
        ;ld (ZadrWork),hl 
        ;ld hl,(SongBaseAddress+2)
        ;ld bc,$0000
        ;adc hl,bc               ; catch the carry
        ;ld (ZadrWork+2),hl
        ;call SETZADDRESS        ; set bank to song base address + 1c!

noloop:
; Now set HL to song data pointer - longword at 0x0034 into the VGM header 
        ld hl,(SongBaseAddress)    ; 00001ef7, need to add 83 to skip header and
                                   ; byte size
        ;ld bc, $0080            ; skip the header
        ;xor a 
        ;adc hl,bc  ; 0x100              ; 1f2b 1f2e is wrong! should be 1f7a
        ld (ZadrWork),hl           ; 16bit addition ; START BAD CODE
        ;ld bc,$0000
        ld hl,(SongBaseAddress+2)
        ;adc hl,bc ; catch the carry 
        ld (ZadrWork+2),hl              ; < ok
        call SETZADDRESS   


        dec hl  ;) < go down one because we call GetNextSongByte below
PLAYLOOP:
;;;;;;;;;;;;;;;;               ; +27..400
        ld a,(SAMPTOWAIT)
        or a 
        jr z, _nosampwt
        push hl 
         ld hl,(SAMPTOWAIT)
         ld bc,(LOCALEWAIT) 
         sbc hl,bc
         jp m,_zero 
         ld (SAMPTOWAIT),hl 
        pop hl 
        jp FRAMEOVER ; SKIP THIS FRAME IF TIME REMAINS.
_zero:
         ld hl, 0
         ld (SAMPTOWAIT), hl 
        pop hl 
_nosampwt:
        %GETNEXTSONGBYTEM
        LD A,(HL)
        ; sub 50h, times 2 + &CMDJUMPTABLE
        ld d,$50
        sub d 
        sla a ; a = (a-50)*2 + jumptab
        ld bc,CMDJUMPTABLE 
        add a,c   ; bc+a =>
        ld c,a    ;  de
        ld a,(bc) 
        ld e,a 
        inc bc 
        ld a,(bc) 
        ld d,a
        push de 
        ret 


FRAMEOVER:
;;;;;;;;;;;
; * A
; Waits until next vblank signal (done via 68k)
        ; Before checking 68k vbl, we need to see if DAC are queued.
        ;LD A,(DacTransferActive) 
        ;cp 0 
        ;call DACBLOCKTRANSFER ; MAD TESTING BRUH
        ld bc,0
_framewait:
        inc bc 
        LD A,(PlayNext)  ; check the 'play next frame' var
        CP 1             ; is it = 1?
        JR NZ,_framewait  ; if not, loop.
        xor a            ; if it is, clear it.
        ld (PlayNext),a 
        ld (FREECYCLES),bc
        JP PLAYLOOP 
;;;; 


;;;;;;;;;;;;;;;;;;;
ERRDEFB: DEFB $99
; This error handling is super rudimentary and only intended to get songs to
;  play without crashing!
ERROR:  
        ;jp ERROR 
        jp LOADVGM

_songoverb: defb $55
SONGOVER:
;;;;;;;;;;;
; * A
; Stops the song when hits command byte 0x66
;  Or, if looping, jumps to loop
        jp LOADVGM


VOLUMESET:
        ;JP PLAYLOOP  
        JP VOLUMESET 
        

aaa: defb $11
WRITEPCM:
        ;jp PLAYLOOP  
        JP WRITEPCM 
bbb: defb $22
; Waits 1-16 samples
QWAIT:
        jp QWAIT
        ; TOO SHORT TO NOTICE?
        and $0f 
        ld b,a 
        ld c,0 
_qwl:   ; idk what to do other than skip 256*n cycles
        dec bc 
        ld a,c 
        or b 
        jr nz, _qwl
        JP PLAYLOOP 
ccc: defb $33
QFMWAIT:
        ;jp PLAYLOOP 
        JP QFMWAIT 

ZadrWork: defb 0,0,0,0

SETZADDRESS:
;;;;;;;;;;;;;;;;;;
; * A H L 
; Input: ZadrWork 32-bit address (68000 memory)
; Output: changes active rom bank, and sets HL to mem addr
        ld hl,(ZadrWork+1) ; ignore bits 0-7, so we have 8-23
        xor a ; clc 
        srl h
        rr l   ; hl >> 1
        srl h
        rr l   ; hl >> 2
        srl h
        rr l   ; hl >> 3
        srl h
        rr l   ; hl >> 4
        srl h
        rr l   ; hl >> 5
        srl h
        rr l   ; hl >> 6
        srl h
        rr l   ; hl >> 7 
        ld a,l 
        ld (RomBank),a ; BITS 15-22
        call BANKSWAP
        LD HL,(ZadrWork)  ; 0-15 
        ld a,$7f 
        and h 
        or $80 ; always set top bit so we look at $8000 + 
        ld h,a
        push hl 
        ld hl,$0000 
        ld (ZadrWork),hl 
        ld (ZadrWork+2),hl 
        pop hl 
        ; [HL] now contains memory pointer!
        ret
;;;;

GETROMADDRESS: 
;;;;;;;;;;;;;;
; INPUT: ZadrWork+0 BANK
;        ZadrWork+2~ZadrWork+3 HL
; (bank * 8000) + HL & 7fff
; OUTPUT: ZadrWork ~ ZadrWork+3 CONTAINS LONGWORD ADDRESS
; * A
; Preserves HL
        push hl
        push bc  
         xor a ; clc 
         ld a,(ZadrWork) ; contains RomBank, A15-A22
         ; 15:
         and $1 
         rr a   ; 15 > carry 
         rr a   ; carry > 7, carry = 0
         ld b,a ; contains bit 15 ; SAVE
         ld a,(ZadrWork) ; 15-22...
         and $fe
         srl a    ; and the last bit and shift RIGHT, so we have 16-23 (minus23)
         ld hl,(ZadrWork+2) 
         ld (ZadrWork+2),a ; put it in the 3rd byte 
         xor a 
         ld (ZadrWork),a 
         ld (ZadrWork+1),a ; zero the first two
         
         ld a,$7f 
         and h ; hl = bits 0-14, dont forget 15 in b!
         or b           ; d(>.< )
         ld h,a
         ld (ZadrWork),hl 
         xor a 
         ld (ZadrWork+3),a ; 24-31 are always 0
        pop bc 
        pop hl 
        RET 


BANKSWAP:
;;;;;;;;;;;;;
; * A (preserve bc)
; RomBank has the # of the 32kb block to write to 6001.
;  Keep it 8 bits for now FIXME for > 8MB song locations 
        push bc                         ; +11
        ld c, 1         ; = 0b00000001  ; +7
        or a                            ; +4
_bswp2: 
        ld a,(RomBank)                  ; +13
        and c                           ; +4
        cp 0                            ; +7
        jr z,_bzero                     ; +12/+7
        jr _bone                        ; +12
_bzero: 
        ;call ZWAIT 
        xor a                           ; +4
        jr _bwrt                        ; +12
_bone:
        ;call ZWAIT 
        ld a,1                          ; +7
_bwrt:
        ld ($6001),a                    ; +13
        sla c           ; = 0b00000010  ; +8
        jr nc,_bswp2    ; loop until bit goes into carry; +12/+7

        ;call ZWAIT 
        xor a                   ; +4
        ld ($6001),a       ; 9 bit = 0 ( works for < 8MB); +13
        pop bc                          ; +10
        ret                             ; +10
;;;;                                    ; ~300?

BANKUP:
;;;;;;;;;;;;;;
; * A H L
; Pops up the rom bank by 1 and 
; sets HL back to $8000
        ld a,(RomBank)          ; +13
        inc a                   ; +4   
        ld (RomBank),a          ; +13
        call BANKSWAP           ; +17 +(BANKSWAP)
        ld hl,$8000             ; +10
        ret                     ; +10
;;;;                            ; Total : 67+~300


WRITEFM1:
;;;;;;;;;;;;;;;;;;;
; HL - location of song byte
; * A  
        %GETNEXTSONGBYTEM 
        ;%ZWAITM 
        LD A,(HL) 
        LD (FMREG0),A
        %GETNEXTSONGBYTEM 
        ;%ZWAITM  
        LD A,(HL) 
        LD (FMDAT0),A 
        JP PLAYLOOP
;;;;

ZWAIT:
;;;;;;;;;;;;;;;;;;
; * A C
        LD A,($4000) 
        ADD A, A 
        JR C,-4
        RET 
;;;;

.macro ZWAITM
        LD A,($4000) 
        ADD A, A 
        JR C,-4
.endmacro 

.macro GETNEXTSONGBYTEM
        inc hl                  ; +6
        ld a,h                  ; +4
        and $80                 ; +7
        call z,BANKUP ; this also sets HL to 8000 +17/10
.endmacro                       ; Total: 27 or 400


WRITEFM2:
;;;;;;;;;;;;;;;;
; HL = song byte
; * A
        %GETNEXTSONGBYTEM
        ;%ZWAITM 
        LD A,(HL) 
        LD (FMREG1),A 
        %GETNEXTSONGBYTEM
        ;%ZWAITM 
        LD A,(HL) 
        LD (FMDAT1),A 
        JP PLAYLOOP 
;;;;

WRITEPSG:
;;;;;;;;;;;;;;;;
; HL = song byte 
; * A
        %GETNEXTSONGBYTEM
        ;CALL ZWAIT 
        LD A,(HL) 
        ld (PSGREG),a 
        JP PLAYLOOP 
;;;;



SAMPLEWAIT:
;;;;;;;;;;;
; * A, B, C
; HL = song byte
        %GETNEXTSONGBYTEM
        ld a,(hl)
        ld c,a 
        %GETNEXTSONGBYTEM
        ld a,(hl)
        ld b,a 
        inc b ; FIXME: This is to fix the "too fast" sample wait
        ld (SAMPTOWAIT),bc 
        JP PLAYLOOP 



CLEARPSG:
;;;;;;;;;;;;;;;;;;;;
; clear the SSG (mute)
; * A, B (preserve HL)
        push hl 
        LD HL,CLRTB 
        ld b,4
_clearlp:
        ld a,(hl) 
        ld (PSGREG),a 
        %GETNEXTSONGBYTEM
        djnz _clearlp
        pop hl 
        RET
;;;;

;; DAC STUFF:

DacWRAM: defb 0, 0
DACWORK
        defb 0,0,0,0

DACBLOCKTRANSFER:
        xor a 
        push hl 
         ld hl,(Sample1Address)
         ld de,(Sample1Address+2)
         add hl,de 
         or h 
         or l 
         jr z,_nosample 
         ; ok, sample found
         jr _playsample
_nosample:
        pop hl 
        ret 

_playsample:
        ; PRESERVE CURRENT ROM BANK AND SONG PTR IN WORKRAM~+3
         ld a,(RomBank)          
         ld (DACWORK),a 
         xor a
         ld (DACWORK+1),a     ; saving me for later!
        pop hl 
        ld (DACWORK+2),hl    ; save hl ofc 
        ; change zadr to sample location
        ld hl,(Sample1Address)
        ld (ZadrWork),hl 
        ld hl,(Sample1Address+2)
        ld (ZadrWork+2),hl 
        call SETZADDRESS
        ; hl has address of sample, FIXME 184 samples/frame = ntsc/11khz
        ld bc,184
        ; loop ....

        ld a,(DACWORK)
        call BANKSWAP
        ld hl,(DACWORK+2)
        ret 
;;;;

QUICKSTOP:

        RET 

STOPDAC:
;;;;;;;;;;;;;;
; Stops DAC and disables DAC mode on CH6
; FIXME broken ?
        %GETNEXTSONGBYTEM 
  
        jp PLAYLOOP  
;;;

StreamID: defb 0
; 90 0 2 0 2a 
; TODO SUPPORT MORE THAN ONE DAC STREAM :)
DACSETUP:
        ;INC HL  ; STREAM ID 
        %GETNEXTSONGBYTEM 
     
        %GETNEXTSONGBYTEM 
        %GETNEXTSONGBYTEM 
        ; write this byte 
        %GETNEXTSONGBYTEM 
        ; to this reg
        
        jp PLAYLOOP 

SETDACSTREAM:        
; 0X91 <STREAM> <DATABANK ID> <STEP SIZE> <STEP BASE>
;         0           0            1           0 
; Preserves BC 
       push bc 
        %GETNEXTSONGBYTEM 
        %GETNEXTSONGBYTEM 
        %GETNEXTSONGBYTEM
        %GETNEXTSONGBYTEM 
       pop bc 

        jp PLAYLOOP  

_invfreq
        defb $88
INVALIDFREQ: JP INVALIDFREQ 

DacTransferActive: 
        defb 0
DacFrequency:
        defb 0, 0
RealFrequency: 
        defb 0,0,0,0

; 
FreqTable:
        DEFW 134,184,267,368,533
PALFreqTable:
        DEFW 160,221,320,441,640

; $92
SETDACFREQ: ; 7D00 == 32000
; 7D00 = 32000 = 533 N 640P ; 
; 5622 = 22050 = 368 N 441P ; 
; 3E80 = 16000 = 267 N 320P ; 
; 2b11 = 11025 = 184 N 221P
; 1f40 = 8000 =  134 N 160P
        %GETNEXTSONGBYTEM
        %GETNEXTSONGBYTEM
        %GETNEXTSONGBYTEM 
        %GETNEXTSONGBYTEM 
        %GETNEXTSONGBYTEM 
    jp PLAYLOOP 


;;;;;;;;;;;;;;;;;
STARTDACSTREAM:
;        inc hl  ; stream id 
        ; TODO NOT USED IN MY EXAMPLES
        JR STARTDACSTREAM

GETBLOCKSTRUCT:
;;;;;;;;;;;;;;;;;;
; IN: [A]
; OUT: HL
; PRESERVES BC 
; * A H L 
        RET 

; 95 00 (0-15) 00
ActiveDacBlock: defb 0  ; which block 0-15 stored below
ActiveDacCtr: defb 0,0,0,0 ; 32bit count
ActiveDacLoc: defb 0,0  ; what is the memory offset
ActiveDacBank: defb 0   ; which 68000 memory bank
LoopDac: defb 0

DACFASTCALL:
;;;;;;;;;;;;;;;;;;;;;;;;
; This should start the DAC playback
; 95 00 ID 00
; for data block info:
; data type 1
; datasize 4
; dataloc 2  (hl) 
; databank 1 (rom)
; datacounter 4 (bytes left this loop)
; blockactive 1 (gogogo)
; 0X95
        %GETNEXTSONGBYTEM 
        %GETNEXTSONGBYTEM
        %GETNEXTSONGBYTEM 
        %GETNEXTSONGBYTEM
        jp PLAYLOOP 


;; 

; Everything below is legacy to handle VGM files with embedded DATs.


;;

; Data Block struct:
DataType: defb $ff
DataSize: defb 0,0,0,0
DataLoc: defb 0,0
DataBank: defb 0
DataCounter: defb 0,0,0,0 
BlockActive: defb 0
_buffer: defb 0,0,0          ; 16 bytes 
;Type (ff means empty) 1
; Compatible types:
; 0: YM2612 PCM data 
;Size 4
; 32 bit size (from VGM file)
;Loc 2 (HL offset of data start)
;Bank 1 (bank of data start)
;Counter 4 (32bit offset remaining to play of this loop)
;BlockActive: 1 if we need to dac stream it, 0 skips
;_buffer 3 : to align to 16 bytes
Block1: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block2: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block3: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block4: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block5: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block6: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block7: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block8: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block9: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block10: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block11: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block12: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block13: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block14: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0
Block15: defb $ff,0,0,0,0,0,0,0
        defb $0,0,0,0,0,0,0,0

DBWORK: defb 0,0

DATABLOCK:
;;;;;;;;;;;;
;
      push de 
        %GETNEXTSONGBYTEM 
        ld a,(hl) 
        ; find an empty block of pointers
        push hl ;9f43 = 66
         ld hl,DataType-16
         ld bc,16      ; 16 BYTES IN SIZE 
_blockfind:
         xor a 
         adc hl,bc 
         ld a,(hl)    ; hl += 16
         cp $ff 
         jr z,_blockok 
         jr _blockfind 
_blockok:         
         push hl 
         pop bc ; now BC has block struct pointer. 
         LD (DBWORK),BC 
        pop hl                  

        %GETNEXTSONGBYTEM
        ld a,(hl) 
        ld (bc),a  ; data type  ; = 0
        %GETNEXTSONGBYTEM
        ; TODO: Check data type
        
        inc bc 
        ld a,(hl)  ; 9f45 = 77
        ld (bc),a ; data size
        ld (WORKRAM),a 
        %GETNEXTSONGBYTEM
        
        ld a,(hl)
        inc bc  
        ld (bc),a ; data size+1 = 0c
        ld (WORKRAM+1),a ; for later
        %GETNEXTSONGBYTEM
        
        inc bc 
        ld a,(hl) 
        ld (bc),a ; data size+2 = 00
        ld (WORKRAM+2),a 
        %GETNEXTSONGBYTEM
        
        inc bc 
        ld a,(hl) 
        ld (bc),a ; data size+3 = 00
        ld (WORKRAM+3),a 
        
        ; now store HL, which is right before data start...
        inc bc 
        ld a,l   ; dataloc l...
        ld (bc),a 
        
        ld a,h   ; and h
        inc bc 
        ld (bc),a ;
        
        ld a,(RomBank) 
        inc bc     ; DataBank
        ld (bc),a ; and store current rom bank, cuz this must be where it starts
        ld (ZadrWork),a 
        xor a 
        ld (ZadrWork+1),a 
        ld (ZadrWork+2),hl ; 0, 0, 9a9f ( = 1a9f)
;Counter 4 (32bit offset remaining to play of this loop)
        ld hl,(WORKRAM) 
        ld a,l 
        inc bc     ; ctr+0
        ld (bc),a 
        ld a,h 
        inc bc 
        ld (bc),a  ; ctr+1 
        ld hl,(WORKRAM+2) 
        ld a,l 
        inc bc   ; ctr+2
        ld (bc),a 
        ld a,h 
        inc bc 
        ld (bc),a  ; ctr+3 
        ; BlockActive starts at 0, we set it to 1 when we hit FASTCALL. 
        ; so ignore the rest.

        ; NEW FUNCTION: Get 68000 address from current bank/HL
        call GETROMADDRESS
        ; ZadrWork = 32bit address of data bank start 
        ; WORKRAM = data size 
        ; add WORKRAM to ZadrWork
        ld hl,(ZadrWork) ; 
        ld bc,(WORKRAM)  ; data size low 16 
        or a 
        adc hl,bc ; check carry 
        ld (ZadrWork),hl ; save low 16
        ld hl,(ZadrWork+2) 
        ld bc,$0000
        adc hl,bc  ; ok  ; carry is cleared here)
        ld bc,(WORKRAM+2) 
        adc hl,bc  ; upper 16
        ld (ZadrWork+2),hl 
        call SETZADDRESS  ; s
        ; now our song pointer and rom window should be
        ; at the byte following the data block -1.
     pop de 
_compressed: ; TODO do extra stuff for compressed data
_uncompressed:
        jp PLAYLOOP     

_emptyblock
        LD A,$FF 
        PUSH HL 
        LD HL,(DBWORK) 
        LD (HL),A 
        POP HL 
        POP DE 
        JP PLAYLOOP 
